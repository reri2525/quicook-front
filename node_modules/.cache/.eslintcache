[{"/front/app/src/index.tsx":"1","/front/app/src/reportWebVitals.ts":"2","/front/app/src/App.tsx":"3","/front/app/src/config.js":"4","/front/app/src/components/PostShow.tsx":"5","/front/app/src/components/Main.tsx":"6","/front/app/src/components/Category.tsx":"7","/front/app/src/components/ProfileEdit.tsx":"8","/front/app/src/components/PasswordResetForm.tsx":"9","/front/app/src/components/Bookmark.tsx":"10","/front/app/src/components/Profile.tsx":"11","/front/app/src/components/Home.tsx":"12","/front/app/src/components/Following.tsx":"13","/front/app/src/components/UpdateEmail.tsx":"14","/front/app/src/components/Search.tsx":"15","/front/app/src/components/Postform.tsx":"16","/front/app/src/components/New.tsx":"17","/front/app/src/components/List.tsx":"18","/front/app/src/components/Footer.tsx":"19","/front/app/src/components/Header.tsx":"20","/front/app/src/components/Login.tsx":"21","/front/app/src/components/PromptingAccountCreation.tsx":"22","/front/app/src/components/FollowersIndex.tsx":"23","/front/app/src/components/WarnModal.tsx":"24","/front/app/src/components/FollowingIndex.tsx":"25","/front/app/src/components/ListData.tsx":"26"},{"size":532,"mtime":1703770384888,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1699112632936,"results":"29","hashOfConfig":"28"},{"size":7289,"mtime":1704482820402,"results":"30","hashOfConfig":"28"},{"size":54,"mtime":1699123526936,"results":"31","hashOfConfig":"28"},{"size":6363,"mtime":1704579911816,"results":"32","hashOfConfig":"28"},{"size":2039,"mtime":1704448376716,"results":"33","hashOfConfig":"28"},{"size":9323,"mtime":1704317349745,"results":"34","hashOfConfig":"28"},{"size":5175,"mtime":1704535198098,"results":"35","hashOfConfig":"28"},{"size":2930,"mtime":1704441721860,"results":"36","hashOfConfig":"28"},{"size":8028,"mtime":1704377920939,"results":"37","hashOfConfig":"28"},{"size":11495,"mtime":1704485009408,"results":"38","hashOfConfig":"28"},{"size":8744,"mtime":1704643548092,"results":"39","hashOfConfig":"28"},{"size":8714,"mtime":1704377899483,"results":"40","hashOfConfig":"28"},{"size":2852,"mtime":1704482921629,"results":"41","hashOfConfig":"28"},{"size":9248,"mtime":1704481713388,"results":"42","hashOfConfig":"28"},{"size":15569,"mtime":1704471020064,"results":"43","hashOfConfig":"28"},{"size":5391,"mtime":1704579911811,"results":"44","hashOfConfig":"28"},{"size":4399,"mtime":1704447356081,"results":"45","hashOfConfig":"28"},{"size":909,"mtime":1704579911794,"results":"46","hashOfConfig":"28"},{"size":3120,"mtime":1704579911796,"results":"47","hashOfConfig":"28"},{"size":5013,"mtime":1704579911804,"results":"48","hashOfConfig":"28"},{"size":1704,"mtime":1704481504963,"results":"49","hashOfConfig":"28"},{"size":3806,"mtime":1704320481668,"results":"50","hashOfConfig":"28"},{"size":1520,"mtime":1704484189582,"results":"51","hashOfConfig":"28"},{"size":3597,"mtime":1704320885570,"results":"52","hashOfConfig":"28"},{"size":3441,"mtime":1704011356873,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m03bj9",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/front/app/src/index.tsx",[],[],"/front/app/src/reportWebVitals.ts",[],[],"/front/app/src/App.tsx",["153"],[],"import { useState, useEffect, createContext } from 'react';\nimport './ScssFile/Share.scss'\nimport axios from'axios';\nimport Main from \"./components/Main\";\nimport Home from \"./components/Home\";\nimport PostShow from \"./components/PostShow\";\nimport Bookmark from './components/Bookmark'; \nimport Search from './components/Search';\nimport Category from './components/Category'\nimport Profile from \"./components/Profile\";\nimport ProfileEdit from \"./components/ProfileEdit\";\nimport Following from './components/Following';\nimport PasswordResetForm from './components/PasswordResetForm';\nimport UpdateEmail from './components/UpdateEmail';\nimport Top from './components/Top';\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { url } from \"./config\";\nimport { TypePost, TypePostShow, TypeUser, TypeMainContext } from './TypeDefinition/Type';\nexport const MainContext = createContext<TypeMainContext>({\n  handleLogin: () => {},\n  loggedInStatus: \"\",\n  user: undefined,\n  handleLogout: () => {},                    \n  promptingAccountCreation: false,                         \n  setPromptingAccountCreation: () => {},\n  bookmarkCreate: () => {},\n  bookmarkDestroy: () => {},                    \n  heartCreate: () => {},\n  heartDestroy: () => {},                         \n  relationshipCreate: () => {},\n  relationshipDestroy:  () => {},\n});\nfunction App() {\n  const [loggedInStatus, setLoggedInStatus] = useState<string>(\"\")\n  const [user, setUser] = useState<TypeUser>()\n  const [promptingAccountCreation, setPromptingAccountCreation] = useState(false)\n  const handleLogin = () => {\n    window.location.pathname = \"/\";\n  }\n  const handleLogout = () => {\n    axios.delete(`${url}/logout`, { withCredentials: true })\n            .then(response => {\n              window.location.pathname = \"/\";\n            }).catch(error => \n              console.log(\"ログアウトエラー\", error)\n            )\n  }\n  const checkLoginStatus = () => {\n    axios.get(`${url}/logged_in`,{ withCredentials: true })\n    .then(response => {\n      if (response.data.logged_in) {\n        setLoggedInStatus(\"ログインなう\")\n        console.log(\"ログイン\")\n        console.log(response.data.user)\n        setUser(response.data.user)\n      } else if (!response.data.logged_in) {\n        setLoggedInStatus(\"未ログイン\")\n        console.log(\"未ログイン\")\n        setUser(undefined)\n      }\n    })\n\n    .catch(error => {\n      console.log(\"ログインエラー\", error)\n   })\n  }\n  // 追加\n  useEffect(() => {\n    checkLoginStatus()\n  }, [])\n  \n  const bookmarkCreate = (post: TypePost | TypePostShow) =>{\n   if (loggedInStatus === \"ログインなう\") {\n    axios.post(`${url}/bookmarks`,  { post_id: post.id }, { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"ブックマーク作成\")\n      }\n    })\n    .catch(error => {\n      console.log(\"ブックマーク作成エラー\", error)\n    })\n   } else {\n    setPromptingAccountCreation(true)\n   }\n  }\n  const bookmarkDestroy = (post: TypePost | TypePostShow) =>{\n    axios.delete(`${url}/bookmarks/${post.id}`, { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"ブックマーク削除\")\n      }\n    })\n    .catch(error => {\n      console.log(\"ブックマーク削除エラー\", error)\n   })\n  }\n\n  const heartCreate = (post: TypePost | TypePostShow) =>{\n   if (loggedInStatus === \"ログインなう\") {\n    axios.post(`${url}/hearts`,  { post_id: post.id },  { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"いいね作成\")\n      }\n    })\n    .catch(error => {\n      console.log(\"いいね削除エラー\", error)\n    })\n   } else {\n    setPromptingAccountCreation(true)\n   }\n  }\n  const heartDestroy = (post: TypePost | TypePostShow) =>{\n    axios.delete(`${url}/hearts/${post.id}`, { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"いいね削除\")\n      }\n    })\n    .catch(error => {\n      console.log(\"いいね削除エラー\", error)\n   })\n  }\n  const relationshipCreate = (id: number) => {\n   if (loggedInStatus === \"ログインなう\") {\n    axios.post(`${url}/relationships`,  { user_id: id },  { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"フォロー\")\n      }\n    })\n    .catch(error => {\n      console.log(\"フォローエラー\", error)\n    })\n   } else {\n    setPromptingAccountCreation(true)\n   }\n  }\n  const relationshipDestroy = (id: number) => {\n    axios.delete(`${url}/relationships/${id}`, { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"フォロー解除\")\n      }\n    })\n    .catch(error => {\n      console.log(\"フォロー解除エラー\", error)\n   })\n  }\n  const contextValue = {\n    loggedInStatus,\n    handleLogin,\n    user,\n    handleLogout,                      \n    promptingAccountCreation,                             \n    setPromptingAccountCreation,\n    bookmarkCreate,\n    bookmarkDestroy,                        \n    heartCreate,\n    heartDestroy,                           \n    relationshipCreate,\n    relationshipDestroy\n  };\n  return (\n  <MainContext.Provider value={contextValue}>\n     <Router>\n      <Switch>\n        <Route exact path=\"/\"\n             render={({ history }) => {\n             history.push('/home/page/1');\n             return <Home />;\n         }}\n        />\n          <Route exact path={\"/home/page/:id\"}\n             render={props => (\n                <Main { ...props } url={<Home />}/>\n            )}\n          />  \n          <Route exact path={\"/posts/:id\"}\n             render={props => (\n              <Main { ...props } url={<PostShow />}/>\n            )}\n          />  \n          <Route exact path={\"/following/page/:id\"}\n             render={props => (\n              <Main { ...props } url={<Following />}/>\n            )}\n          />  \n          <Route exact path={\"/bookmark/page/:id\"}\n             render={props => (\n              <Main { ...props } url={<Bookmark />}/>\n              \n            )}\n          />  \n          <Route exact path={\"/category/:query/page/:id\"}\n             render={props => (\n              <Main { ...props } url={<Category />}/>\n              \n            )}\n          />  \n          <Route exact path={\"/search/:query/page/:id\"}\n             render={props => (\n              <Main { ...props } url={<Search />}/>\n            )}\n          />  \n        <Route exact path={\"/profile/:id/page/:number\"}\n             render={props => (\n              <Main { ...props } url={<Profile />}/>\n            )}\n          />  \n        <Route exact path={\"/edit\"}\n             render={props => (\n              <Main { ...props } url={<ProfileEdit />}/>\n            )}\n          />  \n        <Route exact path={\"/password/:id/reset\"}\n             render={props => (\n              <PasswordResetForm />\n            )}\n          />  \n        <Route exact path={\"/update/:newEmail/email/:id\"}\n             render={props => (\n              <UpdateEmail />\n            )}\n          />  \n      </Switch>\n    </Router>\n  </MainContext.Provider>\n  );\n}\n\nexport default App;\n","/front/app/src/config.js",[],[],"/front/app/src/components/PostShow.tsx",["154","155","156","157","158","159","160","161","162","163"],[],"import { Fragment, useEffect, useState, useRef, useContext } from 'react';\nimport { MainContext } from '../App';\nimport '../ScssFile/PostShow.scss'\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport WarnModal from './WarnModal'\nimport { url } from \"../config\";\nimport { TypePostShow, TypePostAmounts, TypePostMaterials } from '../TypeDefinition/Type';\n\nconst PostShow = () => {\n const context = useContext(MainContext)\n const ref = useRef(null);\n const history = useHistory();\n const currentUser = context.user\n const relationshipCreate = context.relationshipCreate\n const relationshipDestroy = context.relationshipDestroy\n const bookmarkCreate = context.bookmarkCreate\n const bookmarkDestroy = context.bookmarkDestroy\n const heartCreate = context.heartCreate\n const heartDestroy = context.heartDestroy\n const loggedInStatus = context.loggedInStatus\n const [post, setPost] = useState<TypePostShow | undefined>(undefined)\n const [bookmarked, setBookmarked] = useState(false)\n const [hearted, setHearted] = useState(false)\n const [relationship, setRelationship] = useState(false)\n const [warnModal, setWarnModal] = useState(false)\n const [warnType, setWarnType] = useState(\"postDestroy\")\n const { id } = useParams<{id: string}>();\n\n useEffect(() => {\n  openPostShow(id)\n  document.body.style.overflow = 'hidden';\n  return () => {\n    document.body.style.overflow = 'auto';\n  };\n }, [id])\n\n const openPostShow = (id: string) => {\n   axios.get(`${url}/posts/${id}`, { withCredentials: true })\n   .then(response => {\n    if (response.data.post) {\n      const data = response.data.post\n      console.log(data)\n      setPost(data)\n      setBookmarked(data.bookmarked)\n      setHearted(data.hearted)\n      setRelationship(data.relationship)\n    }\n   })\n   .catch(error => {\n    console.log(\"b\")\n   })\n }\n const handleBookmark = (post: TypePostShow) => {\n   console.log(\"ハンドルブックマーク\")\n   if (bookmarked) {\n      setBookmarked(false)\n      bookmarkDestroy(post)\n   } else {\n     if (loggedInStatus === \"ログインなう\") {\n      setBookmarked(true)\n     }\n      bookmarkCreate(post)\n   }\n }\n const handleHeart = (post: TypePostShow) => {\n   console.log(\"ハンドルハート\")\n   if (hearted) {\n    setHearted(false)\n    heartDestroy(post)\n    post.hearts_count = post.hearts_count - 1\n   } else {\n    heartCreate(post)\n    if (loggedInStatus === \"ログインなう\") {\n     setHearted(true)\n     post.hearts_count = post.hearts_count + 1\n    }\n   }\n }\n const handleRelationship = (id: number) => {\n   if (relationship) {\n    setRelationship(false)\n    relationshipDestroy(id)\n   } else {\n    if (loggedInStatus === \"ログインなう\") {\n      setRelationship(true)\n    }\n    relationshipCreate(id)\n   }\n }\n return (\n  <Fragment>\n    <div className='back_display2'></div>\n    { post && post.user.id && (\n    <div className='post_show_container' ref={ref}>\n      <div className='head'>\n        <div className='icon'>\n          <img src={post.user.avatar.url} alt=\"user-avatar\"></img>\n        </div>\n        <Link to={`/profile/${post.user.id}/page/1`}>{post.user.name}</Link>\n        { currentUser && currentUser.id === post.user.id ?\n          <></>\n          :\n          relationship ?\n            <div className=\"unfollow\" onClick={() => handleRelationship(post.user.id)}>フォロー中</div>\n            :\n            <div className=\"follow\" onClick={() => handleRelationship(post.user.id)}>フォローする</div>\n        }\n      </div>\n      <div className='middle'>\n        <div className='post_display'>\n          <div className='post_image_display'>\n            {post.file_type === \"image\" ? <img src={post.image.url} alt=\"post-image\"></img> : <></>}\n            {post.file_type === \"video\" ? <video autoPlay controls src={post.image.url}></video> : <></>}\n          </div>\n          <div className='favorite_container'>\n            <div className='bookmark' onClick={() => handleBookmark(post)}>\n              {bookmarked ? <BookmarkIcon /> : <BookmarkBorderIcon />}\n              <a>保存する</a>\n            </div>\n            <div className='heart' onClick={() => handleHeart(post)}>\n              {hearted ? <FavoriteIcon style={{ color: 'red' }} /> : <FavoriteBorder />}\n              <a>{post.hearts_count}</a>\n            </div>\n          </div>\n        </div>\n        <div className='post_detail'>\n          <div className='post_detail_content'>\n            <h2>{post.title}</h2>\n            <a>{post.content}</a><br />\n            <p>時間:　{post.time}分</p>\n            <p>費用:　{post.cost}円</p>\n            <h3>材料:</h3>\n            <p style={{ fontSize: '16px', opacity: '0.8' }}>({post.number_of_people})</p>\n            {[...Array(15)].map((_, i) => (\n              post.materials[`material_${i + 1}` as keyof TypePostMaterials] && post.amounts[`amount_${i + 1}` as keyof TypePostAmounts] ?\n               <div key={`material_${i + 1}`} className=\"material\">\n                 <a>{post.materials[`material_${i + 1}` as keyof TypePostMaterials]}</a>\n                 <a className='amount_detail'>{post.amounts[`amount_${i + 1}` as keyof TypePostAmounts]}</a>\n               </div>\n                  :\n               <Fragment key={`material_${i + 1}`} />\n            ))}\n            <h3>作り方:</h3>\n            <a>{post.process}</a>\n            <h3>ひとこと:</h3>\n            <a>{post.coment}</a>\n          </div>\n        </div>\n      </div>\n      {currentUser && currentUser.id === post.user.id ?\n        <div className='delete' onClick={() => setWarnModal(true)}><DeleteIcon style={{ fontSize: '30px', cursor: 'pointer' }} /></div>\n        :\n        <></>\n      }\n      <div className='close' onClick={() => history.goBack()}><a><ArrowBackIcon /></a></div>\n    </div>\n     )}\n    {warnModal ? <WarnModal setWarnModal={setWarnModal} warnType={warnType} post={post} /> : <></>}\n  </Fragment>\n  )\n }\n\nexport default PostShow","/front/app/src/components/Main.tsx",["164"],[],"import { Fragment, useState, useContext} from 'react';\nimport { MainContext } from '../App';\nimport '../ScssFile/Main.scss'\nimport Header from './Header';\nimport PostForm from './Postform';\nimport List from './List';\nimport Footer from './Footer';\nimport Logmodal from './Login';\nimport Newmodal from './New';\nimport PromptingAccountCreation from './PromptingAccountCreation';\ntype MainProps = {\n  url: JSX.Element\n}\nconst Main = (props: MainProps) => {\n  const context = useContext(MainContext)\n  const promptingAccountCreation = context.promptingAccountCreation\n  const loggedInStatus = context.loggedInStatus\n  const [postModal, setPostModal] = useState(false); \n  const [logModal, setLogModal] = useState(false);\n  const [newModal, setNewModal] = useState(false);\n  const [modal, setModal] = useState(false);\n  const [flashMessage, setFlashMessage] = useState(\"\")\n\n    return (\n      <Fragment>\n      <body>\n       { flashMessage && \n         <div>\n           <h2 className='flash_message'>{flashMessage}</h2> \n         </div>\n       }\n       <Header setPostModal={setPostModal} setLogModal={setLogModal} setNewModal={setNewModal} setModal={setModal} />\n        <List />\n        <div className='center'>\n         <div className='center_inner'>\n          <div className='center_container'>\n            {props.url}\n          </div>\n         </div>\n        </div>\n         { postModal ? <PostForm setPostModal={setPostModal} /> : <></> }\n         { logModal ? <Logmodal logModal={logModal} setFlashMessage={setFlashMessage} setLogModal={setLogModal} setModal={setModal} /> : <></> }\n         { newModal ? <Newmodal newModal={newModal} setFlashMessage={setFlashMessage} setNewModal={setNewModal} setModal={setModal} /> : <></> }\n         { promptingAccountCreation ? <PromptingAccountCreation setLogModal={setLogModal} setNewModal={setNewModal} /> : <></> } \n         { loggedInStatus === \"未ログイン\" ? <Footer setLogModal={setLogModal} setNewModal={setNewModal}/> : <></> }\n     </body>\n    </Fragment>\n    )\n}\nexport default Main;\n","/front/app/src/components/Category.tsx",["165","166","167","168","169","170","171"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport '../ScssFile/Home.scss'\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport StarIcon from '@mui/icons-material/Star';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport { amber, grey, brown } from '@mui/material/colors';\nimport { url } from \"../config\";\nimport { MainContext } from '../App';\nimport { TypePost } from '../TypeDefinition/Type';\nfunction Category() {\n  const context = useContext(MainContext);\n  const loggedInStatus = context.loggedInStatus;\n  const bookmarkCreate = context.bookmarkCreate;\n  const bookmarkDestroy = context.bookmarkDestroy;\n  const heartCreate = context.heartCreate;\n  const heartDestroy = context.heartDestroy;\n  const { id } = useParams<{id: string}>();\n  const { query } = useParams<{query: string}>();\n  const numericId = parseInt(id);\n  const history = useHistory();\n  const [postall, setPostall] = useState<TypePost[]>([]);\n  const [pagecount, setPagecount] = useState(1);\n  const [currentPage, setCurrentPage] = useState(numericId);\n  const page = [...Array(pagecount).keys()].map((i) => i + 1);\n  const [bookmarkedPosts, setBookmarkedPosts] = useState<number[]>([]);\n  const [heartedPosts, setHeartedPosts] = useState<number[]>([]);\n  const [postExist, setPostExist] = useState(true);\n\n  useEffect(() => {\n    setPostExist(true)\n    setPostall([])\n    postAllGet();\n  }, [id]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    setPostExist(true)\n    setPostall([])\n    setPagecount(1)\n    setCurrentPage(1)\n    postAllGet();\n    setCurrentPage(numericId)\n  }, [query]);\n\n  const postShow = (id: number) => {\n    history.push(`/posts/${id}`)\n  };\n\n  const postAllGet = () =>{\n     axios.get(`${url}/category/${query}`, { params: { page: currentPage }, withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        const data = response.data.post_all\n        setPostall(data)\n        setPagecount(response.data.total_pages)\n        console.log(\"投稿取得成功\")\n        for (let i = 0; i < data.length; i++) {\n          bookmarkExist(data[i]);\n        }\n        for (let i = 0; i < data.length; i++) {\n          heartExist(data[i]);\n        }\n        setPostExist(true)\n      } else {\n        setPagecount(0)\n        setPostExist(false)\n        console.log(\"投稿なし\")\n      }\n    })\n    .catch(error => {\n      console.log(\"投稿取得エラー\", error)\n    })\n  };\n\n  const postAdd = (page: number) => {\n    setCurrentPage(page)\n    history.push(`/category/${query}/page/${page}`)\n    window.scrollTo(0, 0);\n  };\n\n  const postBack = (currentPage: number) => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1)\n      history.push(`/category/${query}/page/${currentPage - 1}`)\n      }\n    window.scrollTo(0, 0);\n  };\n\n  const postGo = (currentPage: number) => {\n    if (currentPage !== pagecount) {\n      setCurrentPage(currentPage + 1)\n      history.push(`/category/${query}/page/${currentPage + 1}`)\n    }\n    window.scrollTo(0, 0);\n  };\n\n  const handleBookmark = (post: TypePost) => {\n    if  (bookmarkedPosts.includes(post.id)) {\n     bookmarkDestroy(post)\n     setBookmarkedPosts(bookmarkedPosts.filter(id => id !== post.id));\n    } else {\n     bookmarkCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setBookmarkedPosts([...bookmarkedPosts, post.id]);\n     }\n    }\n  };\n\n  const bookmarkExist = (post: TypePost) => {\n    setBookmarkedPosts((prevBookmarkedPosts) => {\n      if (post.bookmarks && post.bookmarks[0]) {\n        return [...prevBookmarkedPosts, post.id];\n      } else {\n        return prevBookmarkedPosts.filter(id => id !== post.id);\n      }\n    });\n  };\n\n  const handleHeart = (post: TypePost) => {\n    if  (heartedPosts.includes(post.id)) {\n     heartDestroy(post)\n     setHeartedPosts(heartedPosts.filter(id => id !== post.id));\n     post.heart_count = post.heart_count - 1\n    } else {\n     heartCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setHeartedPosts([...heartedPosts, post.id]);\n      post.heart_count = post.heart_count + 1\n     }\n    }\n  };\n\n  const heartExist = (post: TypePost) => {\n    setHeartedPosts((prevHeartedPosts) => {\n      if (post.hearts && post.hearts[0]) {\n        return [...prevHeartedPosts, post.id];\n      } else {\n        return prevHeartedPosts.filter(id => id !== post.id);\n      }\n    });\n  };\n  \n  return (\n    <Fragment>  \n      { postExist ? \n         <></> \n           : \n         <Fragment>\n           <div className='post_not_exist'>\n             <h1>投稿が見つかりませんでした。</h1>\n             <HighlightOffIcon className='highlight_off_icon' style={{fontSize: '60px'}}/>\n           </div>\n         </Fragment>\n      } \n      { postall[0] ? \n      <Fragment>\n      <h2 className='saerch_or_category_query'>カテゴリ「{query}」</h2>\n      <div className='post_container'>\n       {postall.map((value: TypePost, key: number) => {\n         let iconColor;\n\n         if (key === 0) {\n           iconColor = amber[500]; // 金色\n         } else if (key === 1) {\n           iconColor = grey[500]; // 銀色\n         } else if (key === 2) {\n           iconColor = brown[500]; // 銅色\n         }\n         return (\n         <Fragment>\n          <div className='post' key={key} onClick={() => postShow(postall[key].id)}>\n           <div className='head'>\n             <div className='icon'>\n               <img src={value.user.avatar.url}></img>\n               {key <= 2 && (\n                <Fragment>\n                 <StarIcon style={{ color: iconColor, fontSize: '60px', position: 'relative', top: '33px', right: '36px'}} />\n                 <h2>{key +1}</h2>\n                </Fragment>\n               )}\n             </div>\n               <Link to={`/profile/${value.user.id}/page/1`}\n                  onClick={(e) => {e.stopPropagation();} }>\n                     {value.user.name}\n               </Link>\n               <div className='bookmark' onClick={(e) => {e.stopPropagation(); handleBookmark(value); } }>\n                    {bookmarkedPosts.includes(value.id) ? <BookmarkIcon/> : <BookmarkBorderIcon/>}\n               </div>\n           </div>\n           <div className='middle'>\n              { value.file_type === \"image\" ? <img src={value.thumbnail.url}></img> : <></> }\n              { value.file_type === \"video\" ? \n                  <Fragment>\n                    <img src={value.thumbnail.url}></img>\n                    <PlayCircleOutlineIcon className='play_icon' style={{fontSize: '50px', color: 'white', fontWeight: '200'}}/> \n                  </Fragment>\n                     : \n                  <></> \n              }\n           </div>\n           <div className='foot'>\n             <a>{value.title}</a>\n             <div className='favorite' onClick={(e) => {e.stopPropagation(); handleHeart(value); }}>\n                  {heartedPosts.includes(value.id) ? <FavoriteIcon style={{ color: 'red' }}/> : <FavoriteBorder/>}\n             </div>\n             <a className='heart_count'>{value.heart_count}</a>\n           </div>\n          </div>\n         </Fragment> \n         )\n       })}\n      </div>\n      </Fragment>\n      : <></> }\n      { postall.length === 0 && postExist ? \n               <div className='post_skeleton_container'>\n                 {[...Array(20).keys()].map(i =>\n                    <div className='post_skeleton'></div>\n                 )}\n               </div> :\n      <div className='pagenate_container'>\n       {pagecount > 1 ? \n       <div className='pagenate'><nav className='back'>back</nav>\n        <button className='page_move' onClick={() => postBack(currentPage)}><NavigateBeforeIcon/></button>\n        { currentPage === 1 ? \"\" :\n         <button \n           className={1 === currentPage ? 'active' : ''}\n           onClick={() => postAdd(1)}>\n              1\n          </button>}\n        {pagecount > 6 && currentPage > pagecount - 6 ? \n        page.slice(pagecount - 6, pagecount ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         )) :\n        page.slice(currentPage < 7 && currentPage !== 1 ? 1 : currentPage - 1, currentPage === 1 ? currentPage + 6 : currentPage < 7 ? 7 : currentPage + 5 ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         ))}\n        <button className='page_move' \n           onClick={() => postGo(currentPage)}>\n            <NavigateNextIcon/>\n        </button>\n        <nav className='next'>next</nav>\n       </div> : <></> }\n      </div>}\n   </Fragment>\n  )\n} \n\nexport default Category","/front/app/src/components/ProfileEdit.tsx",["172","173","174","175","176"],[],"import { useState, useEffect, Fragment, useContext } from 'react'\nimport '../ScssFile/ProfileEdit.scss'\nimport WarnModal from './WarnModal'\nimport axios from 'axios'\nimport { url } from \"../config\";\nimport { MainContext } from '../App';\nimport { TypeFileDetails, TypeUserProfileEdit } from '../TypeDefinition/Type';\nfunction ProfileEdit() {\n const context = useContext(MainContext)\n const user: TypeUserProfileEdit = context.user as TypeUserProfileEdit;\n const [update, setUpdate] = useState<string | null>(null)\n const [errors, setErrors] = useState<string | null>(null)\n const [name, setName] = useState(user && user.name)\n const [nameChange, setNameChange]= useState(user && user.name)\n const [introduction, setIntroduction] = useState(user && user.introduction)\n const [email, setEmail] = useState(user && user.email)\n const [avatar, setAvatar] = useState<TypeFileDetails>()\n const [avatarPreview, setAvatarPreview] = useState<string | ArrayBuffer | null | undefined>(user && user.avatar.url)\n const [password, setPassword] = useState(\"\")\n const [passwordConfirmation, setPasswordConfirmation] = useState(\"\")\n const [warnModal, setWarnModal] = useState(false)\n const warnType = \"acountDestroy\"\n const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n  console.log(user && user.id)\n  event.preventDefault()\n  const formData = new FormData();\n  name && formData.append('user[name]', name);\n  if (avatar) {formData.append('user[avatar]', avatar)}\n  introduction && formData.append('user[introduction]', introduction);\n  email && formData.append('user[email]', email);\n  formData.append('user[password]', password);\n  formData.append('user[password_confirmation]', passwordConfirmation);\n  axios.put(`${url}/users/${user && user.id}`, formData)\n    .then(response => {\n      if (response.data.status === true) {\n        const data = response.data\n        user && (user.name = data.user.name)\n        user && (user.introduction = data.user.introduction)\n        user && (user.email = data.user.email)\n        user && (user.avatar = data.user.avatar)\n        setNameChange(data.user.name)\n        setErrors(null)\n        setUpdate(\"変更されました。\")\n        window.scrollTo(0, 0);\n      } else if (response.data.status === \"update_email\") {\n        setErrors(null)\n        setUpdate(\"メールを確認して承認してください。\")\n        window.scrollTo(0, 0);\n      } else {\n        setErrors(\"変更されませんでした。\")\n        setUpdate(null)\n        window.scrollTo(0, 0);\n      }\n      }).catch(error => {\n        setErrors(\"変更されませんでした。\")\n        setUpdate(null)\n        window.scrollTo(0, 0);\n      })\n }\n const filechange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  event.target.files && setAvatar(event.target.files[0])\n  const reader = new FileReader()\n       reader.onload = (event: ProgressEvent<FileReader>) => {\n           setAvatarPreview(event.target && event.target.result)\n       };\n       event.target.files && reader.readAsDataURL(event.target.files[0])\n }\n const handleDestroy = () => {\n  setWarnModal(true)\n }\n useEffect(() => {\n   if (warnModal) {\n     document.body.style.overflow = 'hidden';\n   } else {\n     document.body.style.overflow = 'auto';\n   }\n   setEmail(user && user.email)\n }, [warnModal])\n return (\n  <Fragment>\n   { user && (\n    <div className='edit'>\n      <div className='edit_container'>\n        <form onSubmit={event => onSubmit(event)}>\n         { update && <h3 className='update'>{update}</h3> }\n         { errors && <h3 className='errors'>{errors}</h3> }\n         <div className='icon'>\n         {avatarPreview && !(avatarPreview instanceof ArrayBuffer) && \n          <img className='image'\n            src={avatarPreview}>\n          </img>\n         }\n         </div>\n         <label className='icon_edit'>\n           プロフィール写真の編集\n           <input type='file' \n             className='image_input'\n             accept='image/*'\n             onChange={filechange}\n           />\n         </label><br/>\n         <label>名前</label><br/>\n         <input className='name'\n          value={name}\n          maxLength={10}\n          onChange={event => setName(event.target.value)}\n         /><br/>\n         <label>自己紹介</label><br/>\n         <textarea className='self_introduction'\n          value={introduction}\n          maxLength={130}\n          onChange={event => setIntroduction(event.target.value)}\n         /><br/>\n         <label>メールアドレス</label><br/>\n         <input className='email'\n           value={email}\n           onChange={event => setEmail(event.target.value)}\n         /><br/>\n         <button type='submit' className='update_button'>更新する</button>\n         <button type='button' className='password_reset_button' onClick={() => handleDestroy()}>パスワード再設定</button>\n         <button type='button' className='acount_destroy_button' onClick={() => handleDestroy()}>アカウント削除</button>\n        </form>\n      </div>\n    </div>\n   )}\n    { warnModal ? <WarnModal setWarnModal={setWarnModal} warnType={warnType} user={user}/> : <></> }\n  </Fragment>\n  )\n}\n\nexport default ProfileEdit","/front/app/src/components/PasswordResetForm.tsx",["177"],[],"import axios from 'axios'\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { url } from \"../config\";\nimport '../ScssFile/PasswordResetForm.scss'\nfunction PasswordResetForm() {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    criteriaMode: 'all',\n  });\n  const password = watch('password', '')\n  const passwordConfirmation = watch('passwordConfirmation', '')\n  const { id } = useParams<{id: string}>();\n  const onSubmit = () => {\n    axios.put(`${url}/password_resets/1`,{user: {password: password, password_confirmation: passwordConfirmation, email: id}},{ withCredentials: true }\n    ).then(response => {\n        if (response.data.status === true) {\n          window.location.pathname = \"/\";\n        }\n    })\n  }\n  return (\n    <div className='reset_form'>\n        <form className=\"form\">\n             <h1>入力してください</h1>\n                <label>パスワード</label><br></br>\n                <input className={errors.password ? 'input_errors' : 'input'}\n                    type=\"password\"\n                    {...register('password', { required: true, minLength: 6})}                     \n                /><br></br>\n                {errors.password?.type === 'required' && (\n                  <div className='errors'>※パスワードが入力されていません</div>\n                )}\n                {errors.password?.type === 'minLength' && (\n                  <div className='errors'>※パスワードが短すぎます!</div>\n                )}\n                <label>パスワード確認</label><br></br>\n                <input className={errors.passwordConfirmation ? 'input_errors' : 'input'}\n                    type=\"password\"\n                    {...register('passwordConfirmation', { \n                      required: true, \n                      minLength: 6,\n                      validate: (value) =>\n                      value === watch('password'),\n                    })}                     \n                /><br></br>\n                {errors.passwordConfirmation?.type === 'required' && (\n                  <div className='errors'>※パスワードが入力されていません</div>\n                )}\n                {errors.passwordConfirmation?.type === 'minLength' && (\n                  <div className='errors'>※パスワードが短すぎます!</div>\n                )}\n                {errors.passwordConfirmation?.type === 'validate' && (\n                  <div className='errors'>※パスワードが一致しません</div>\n                )}\n                <button className='btn' type=\"button\" onClick={event => handleSubmit(onSubmit)}>送信</button><br></br>\n                <a className='password-warn'>パスワードは英文字または数字で6桁以上入力してください</a><br></br>\n        </form>\n    </div>\n  )\n}\n\nexport default PasswordResetForm","/front/app/src/components/Bookmark.tsx",["178","179","180","181","182","183","184"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport { MainContext } from '../App';\nimport '../ScssFile/Home.scss'\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport { url } from \"../config\";\nimport { TypePost } from '../TypeDefinition/Type';\nfunction Bookmark() {\n  const context = useContext(MainContext)\n  const bookmarkCreate = context.bookmarkCreate\n  const bookmarkDestroy = context.bookmarkDestroy\n  const heartCreate = context.heartCreate\n  const heartDestroy = context.heartDestroy\n  const { id } = useParams<{id: string}>();\n  const numericId = parseInt(id);\n  const history = useHistory();\n  const [postall, setPostall] = useState<TypePost[]>([]);\n  const [pagecount, setPagecount] = useState(1);\n  const [currentPage, setCurrentPage] = useState(numericId);\n  const page = [...Array(pagecount).keys()].map((i) => i + 1);\n  const [bookmarkedPosts, setBookmarkedPosts] = useState<number[]>([]);\n  const [heartedPosts, setHeartedPosts] = useState<number[]>([]);\n  const [postExist, setPostExist] = useState(true);\n\n  useEffect(() => {\n    setPostall([])\n    window.scrollTo(0, 0);\n    postAllGet();\n  }, [id])\n\n  const postShow = (id: number) => {\n    history.push(`/posts/${id}`)\n  }\n  const postAllGet = () =>{\n    axios.get(`${url}/bookmarks`, { params: { page: currentPage }, withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        const data = response.data.post_all\n        setPostall(data)\n        setPagecount(response.data.total_pages)\n        console.log(\"投稿取得成功\")\n        for (let i = 0; i < data.length; i++) {\n          bookmarkExist(data[i]);\n        }\n        for (let i = 0; i < data.length; i++) {\n          heartExist(data[i]);\n        }\n        setPostExist(true)\n      } else {\n        setPostExist(false)\n        console.log(\"投稿なし\")\n      }\n    })\n    .catch(error => {\n      console.log(\"投稿取得エラー\", error)\n    })\n  }\n  const postAdd = (page: number) => {\n    setCurrentPage(page)\n    history.push(`/bookmark/page/${page}`)\n    window.scrollTo(0, 0);\n  }\n  const postBack = (currentPage :number) => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1)\n      history.push(`/bookmark/page/${currentPage - 1}`)\n      }\n    window.scrollTo(0, 0);\n  }\n  const postGo = (currentPage: number) => {\n    if (currentPage !== pagecount) {\n      setCurrentPage(currentPage + 1)\n      history.push(`/bookmark/page/${currentPage + 1}`)\n    }\n    window.scrollTo(0, 0);\n  }\n  const handleBookmark = (post: TypePost) => {\n   if  (bookmarkedPosts.includes(post.id)) {\n    bookmarkDestroy(post)\n    setBookmarkedPosts(bookmarkedPosts.filter(id => id !== post.id));\n   } else {\n    bookmarkCreate(post)\n    setBookmarkedPosts([...bookmarkedPosts, post.id]);\n   }\n  }\n  const bookmarkExist = (post: TypePost) => {\n    setBookmarkedPosts((prevBookmarkedPosts) => {\n      if (post.bookmarks && post.bookmarks[0]) {\n        return [...prevBookmarkedPosts, post.id];\n      } else {\n        return prevBookmarkedPosts.filter(id => id !== post.id);\n      }\n    });\n  }\n  const handleHeart = (post: TypePost) => {\n    if  (heartedPosts.includes(post.id)) {\n     heartDestroy(post)\n     setHeartedPosts(heartedPosts.filter(id => id !== post.id));\n     post.heart_count = post.heart_count - 1\n    } else {\n     heartCreate(post)\n     setHeartedPosts([...heartedPosts, post.id]);\n     post.heart_count = post.heart_count + 1\n    }\n   }\n  const heartExist = (post: TypePost) => {\n    setHeartedPosts((prevHeartedPosts) => {\n      if (post.hearts && post.hearts[0]) {\n        return [...prevHeartedPosts, post.id];\n      } else {\n        return prevHeartedPosts.filter(id => id !== post.id);\n      }\n    });\n  }\n  return (\n    <Fragment> \n      { postExist ? \n         <></> \n           : \n         <Fragment>\n           <div className='post_not_exist'>\n             <h1>ブックマーク機能を活用して好きな料理を保存しよう!</h1>\n             <img className='highlight_off_icon' src='https://assets.st-note.com/img/1689656664988-phTXkWUO83.png?width=800'/>\n           </div>\n         </Fragment>\n      } \n      { postall[0] ? \n      <div className='post_container'>\n       {postall.map((value: TypePost, key: number) => {\n         return (\n         <div className='post' key={key} onClick={() => postShow(postall[key].id)}>\n           <div className='head'>\n             <div className='icon'>\n             <img src={value.user.avatar.url}></img>\n             </div>\n               <Link to={`/profile/${value.user.id}/page/1`}\n                  onClick={(e) => {e.stopPropagation();} }>\n                     {value.user.name}\n               </Link>\n               <div className='bookmark' onClick={(e) => {e.stopPropagation(); handleBookmark(value); } }>\n                    {bookmarkedPosts.includes(value.id) ? <BookmarkIcon/> : <BookmarkBorderIcon/>}\n               </div>\n           </div>\n           <div className='middle'>\n              { value.file_type === \"image\" ? <img src={value.thumbnail.url}></img> : <></> }\n              { value.file_type === \"video\" ? \n                  <Fragment>\n                    <img src={value.thumbnail.url}></img>\n                    <PlayCircleOutlineIcon className='play_icon' style={{fontSize: '50px', color: 'white', fontWeight: '200'}}/> \n                  </Fragment>\n                     : \n                  <></> \n              }\n           </div>\n           <div className='foot'>\n             <a>{value.title}</a>\n             <div className='favorite' onClick={(e) => {e.stopPropagation(); handleHeart(value); }}>\n                  {heartedPosts.includes(value.id) ? <FavoriteIcon style={{ color: 'red' }}/> : <FavoriteBorder/>}\n             </div>\n             <a className='heart_count'>{value.heart_count}</a>\n           </div>\n         </div>\n         )\n       })}\n      </div>\n      : <></> }\n      { postall.length === 0 && postExist ? \n               <div className='post_skeleton_container'>\n                 {[...Array(20).keys()].map(i =>\n                    <div className='post_skeleton'></div>\n                 )}\n               </div> :\n      <div className='pagenate_container'>\n       {pagecount > 1 ? \n       <div className='pagenate'><nav className='back'>back</nav>\n        <button className='page_move' onClick={() => postBack(currentPage)}><NavigateBeforeIcon/></button>\n        { currentPage === 1 ? \"\" :\n         <button \n           className={1 === currentPage ? 'active' : ''}\n           onClick={() => postAdd(1)}>\n              1\n          </button>}\n        {pagecount > 6 && currentPage > pagecount - 6 ? \n        page.slice(pagecount - 6, pagecount ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         )) :\n        page.slice(currentPage < 7 && currentPage !== 1 ? 1 : currentPage - 1, currentPage === 1 ? currentPage + 6 : currentPage < 7 ? 7 : currentPage + 5 ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         ))}\n        <button className='page_move' \n           onClick={() => postGo(currentPage)}>\n            <NavigateNextIcon/>\n        </button>\n        <nav className='next'>next</nav>\n       </div> : <></> }\n      </div>}\n   </Fragment>\n  )\n} \n\nexport default Bookmark","/front/app/src/components/Profile.tsx",["185","186","187","188","189","190","191","192","193","194","195","196","197"],[],"import { useState, useEffect, useContext, Fragment } from 'react';\nimport { MainContext } from '../App';\nimport '../ScssFile/Profile.scss'\nimport axios from 'axios';\nimport { Link } from 'react-router-dom'\nimport { useParams } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport FollowingIndex from './FollowingIndex';\nimport FollowersIndex from './FollowersIndex';\nimport { url } from \"../config\";\nimport { TypeUserProfile, TypePost } from '../TypeDefinition/Type';\nfunction Profile(props: any) {\n  const context = useContext(MainContext)\n  const loggedInStatus = context.loggedInStatus\n  const bookmarkCreate = context.bookmarkCreate\n  const bookmarkDestroy = context.bookmarkDestroy\n  const heartCreate = context.heartCreate\n  const heartDestroy = context.heartDestroy\n  const relationshipCreate = context.relationshipCreate\n  const relationshipDestroy = context.relationshipDestroy\n  const currentUser = context.user\n  const [user, setUser] = useState<TypeUserProfile>()\n  const [relationship, setRelationship] = useState(false)\n  const [follow, setFollow] = useState(0)\n  const [follower, setFollower] = useState(0)\n  const [postsCount, setPostsCount] = useState(0)\n  const [followingIndexModal, setFollowingIndexModal] = useState(false)\n  const [followersIndexModal, setFollowersIndexModal] = useState(false)\n  const params = useParams<{ id: string, number: string }>();\n  const id = params.id\n  const number = params.number\n  const numericNumber = parseInt(id);\n  const history = useHistory();\n  const [postall, setPostall] = useState<TypePost[]>([])\n  const [pagecount, setPagecount] = useState(0)\n  const [currentPage, setCurrentPage] = useState(numericNumber)\n  const page = [...Array(pagecount).keys()].map((i) => i + 1);\n  const [bookmarkedPosts, setBookmarkedPosts] = useState([0]);\n  const [heartedPosts, setHeartedPosts] = useState([0]);\n  const [postExist, setPostExist] = useState(true)\n\n  useEffect(() => {\n    setPostall([])\n    openPlofile(id)\n  }, [id])\n\n  useEffect(() => {\n    setPostall([])\n    postAllGet(id)\n  }, [number, id])\n\n  const openPlofile = (id: string) => {\n    axios.get(`${url}/users/${id}`, { withCredentials: true })\n    .then(response => {\n        const data = response.data\n        setUser(data.user)\n        setFollow(data.followed_count)\n        setFollower(data.follower_count)\n        setRelationship(data.relationship)\n        setPostsCount(data.posts_count)\n        console.log(data)\n    })\n    .catch(error => console.log(\"ユーザーいない\"))\n  }\n\n  const handleRelationship = (id: number) => {\n    if (relationship) {\n     setRelationship(false)\n     setFollower(follower - 1)\n     relationshipDestroy(id)\n    } else {\n     if (loggedInStatus === \"ログインなう\") {\n       setRelationship(true)\n       setFollower(follower + 1)\n     }\n     relationshipCreate(id)\n    }\n  }\n\n  const postShow = (id: number) => {\n    history.push(`/posts/${id}`)\n  }\n\n  const postAllGet = (id: string) =>{\n     axios.get(`${url}/user/${id}/posts`, { params: { page: currentPage }, withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        const data = response.data.post_all\n        setPostall(data)\n        setPagecount(response.data.total_pages)\n        console.log(\"投稿取得成功\")\n        for (let i = 0; i < data.length; i++) {\n          bookmarkExist(data[i]);\n        }\n        for (let i = 0; i < data.length; i++) {\n          heartExist(data[i]);\n        }\n        setPostExist(true)\n      } else {\n        setPostExist(false)\n        setPagecount(0)\n        setCurrentPage(1)\n        console.log(\"投稿なし\")\n      }\n    })\n    .catch(error => {\n      console.log(\"投稿取得エラー\", error)\n    })\n  }\n  const postAdd = (page: number) => {\n    setCurrentPage(page)\n    history.push(`/profile/${id}/page/${page}`)\n    window.scrollTo(0, 0);\n  }\n  const postBack = (currentPage: number) => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1)\n      history.push(`/profile/${id}/page/${currentPage - 1}`)\n      }\n    window.scrollTo(0, 0);\n  }\n  const postGo = (currentPage: number) => {\n    if (currentPage !== pagecount) {\n      setCurrentPage(currentPage + 1)\n      history.push(`/profile/${id}/page/${currentPage + 1}`)\n    }\n    window.scrollTo(0, 0);\n  }\n  const handleBookmark = (post: TypePost) => {\n    if  (bookmarkedPosts.includes(post.id)) {\n     bookmarkDestroy(post)\n     setBookmarkedPosts(bookmarkedPosts.filter(id => id !== post.id));\n    } else {\n     bookmarkCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setBookmarkedPosts([...bookmarkedPosts, post.id]);\n     }\n    }\n   }\n  const bookmarkExist = (post: TypePost) => {\n    setBookmarkedPosts((prevBookmarkedPosts) => {\n      if (post.bookmarks && post.bookmarks[0]) {\n        return [...prevBookmarkedPosts, post.id];\n      } else {\n        return prevBookmarkedPosts.filter(id => id !== post.id);\n      }\n    });\n  }\n  const handleHeart = (post: TypePost) => {\n    if  (heartedPosts.includes(post.id)) {\n     heartDestroy(post)\n     setHeartedPosts(heartedPosts.filter(id => id !== post.id));\n     post.heart_count = post.heart_count - 1\n    } else {\n     heartCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setHeartedPosts([...heartedPosts, post.id]);\n      post.heart_count = post.heart_count + 1\n     }\n    }\n  }\n  const heartExist = (post: TypePost) => {\n    setHeartedPosts((prevHeartedPosts) => {\n      if (post.hearts && post.hearts[0]) {\n        return [...prevHeartedPosts, post.id];\n      } else {\n        return prevHeartedPosts.filter(id => id !== post.id);\n      }\n    });\n  }\n  return (\n   <Fragment>\n    {user  && user.id && (\n    <div className='profile_container'>\n      <div className='icon'>\n        <img className='image' src={user.avatar.url} alt=\"User Avatar\" />\n      </div>\n      <div className='explanation'>\n        <a className='user_name'>{user.name}</a>\n        { currentUser && user.id === currentUser.id ? \n          <Link to=\"/edit\" style={{ textDecoration: 'none', cursor: 'pointer' }}>\n            <a className='edit_profile'>プロフィール編集</a>\n          </Link> \n            : \n          relationship ?\n              <a className=\"unfollow\" onClick={() => handleRelationship(user.id)}>フォロー中</a>\n                :\n              <a className=\"follow\" onClick={() => handleRelationship(user.id)}>フォローする</a>\n        }\n        <div className='user_data'>\n         <a>投稿  {postsCount ? postsCount : 0 } 件</a>\n         <a className='follow_modal' onClick={() => setFollowingIndexModal(true)}>フォロー {follow ? follow : 0 } 人</a>\n         <a className='follow_modal' onClick={() => setFollowersIndexModal(true)}>フォロワー {follower ? follower : 0 } 人</a>\n         <pre>{user.introduction}</pre>\n        </div>\n      </div>\n    </div>\n    )}\n    { postExist ? \n         <></> \n           : \n         <Fragment>\n           <div className='post_not_exist'>\n           {user && currentUser && user.id === currentUser.id ? <h1>レシピを投稿してみよう!</h1> : user && <h1>このユーザーはまだ投稿をしていません。</h1>}\n           {user && <HighlightOffIcon className='highlight_off_icon' style={{fontSize: '60px'}}/>}\n           </div>\n         </Fragment>\n    } \n    { postall[0] ? \n      <div className='post_container_profile'>\n       {postExist ? <></> : <h1>誰も投稿してないの！？まじ？</h1>} \n       {postall.map((value: any, key: number) => {\n         return (\n         <div className='post' key={key} onClick={() => postShow(postall[key].id)}>\n           <div className='head'>\n             <div className='icon'>\n             <img src={value.user.avatar.url}></img>\n             </div>\n               <Link to={`/profile/${value.user.id}/page/1`}\n                  onClick={(e) => {e.stopPropagation();} }>\n                     {value.user.name}\n               </Link>\n               <div className='bookmark' onClick={(e) => {e.stopPropagation(); handleBookmark(value); } }>\n                    {bookmarkedPosts.includes(value.id) ? <BookmarkIcon/> : <BookmarkBorderIcon/>}\n               </div>\n           </div>\n           <div className='middle'>\n              { value.file_type === \"image\" ? <img src={value.thumbnail.url}></img> : <></> }\n              { value.file_type === \"video\" ? \n                  <Fragment>\n                    <img src={value.thumbnail.url}></img>\n                    <PlayCircleOutlineIcon className='play_icon' style={{fontSize: '50px', color: 'white', fontWeight: '200'}}/> \n                  </Fragment>\n                     : \n                  <></> \n              }\n           </div>\n           <div className='foot'>\n             <a>{value.title}</a>\n             <div className='favorite' onClick={(e) => {e.stopPropagation(); handleHeart(value); }}>\n                  {heartedPosts.includes(value.id) ? <FavoriteIcon style={{ color: 'red' }}/> : <FavoriteBorder/>}\n             </div>\n             <a className='heart_count'>{value.heart_count}</a>\n           </div>\n         </div>\n         )\n       })}\n      </div>\n      : <></> }\n      { postall.length === 0 && postExist ? \n               <div className='post_skeleton_container_profile'>\n                 {[...Array(20).keys()].map(i =>\n                    <div className='post_skeleton'></div>\n                 )}\n               </div> :\n      <div className='pagenate_container'>\n       {pagecount > 1 ? \n       <div className='pagenate'><nav className='back'>back</nav>\n        <button className='page_move' onClick={() => postBack(currentPage)}><NavigateBeforeIcon/></button>\n        { currentPage === 1 ? \"\" :\n         <button \n           className={1 === currentPage ? 'active' : ''}\n           onClick={() => postAdd(1)}>\n              1\n          </button>}\n        {pagecount > 6 && currentPage > pagecount - 6 ? \n        page.slice(pagecount - 6, pagecount ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         )) :\n        page.slice(currentPage < 7 && currentPage !== 1 ? 1 : currentPage - 1, currentPage === 1 ? currentPage + 6 : currentPage < 7 ? 7 : currentPage + 5 ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         ))}\n        <button className='page_move' \n           onClick={() => postGo(currentPage)}>\n            <NavigateNextIcon/>\n        </button>\n        <nav className='next'>next</nav>\n       </div> : <></> }\n      </div>}\n    { followingIndexModal ? <FollowingIndex user={user} setFollowingIndexModal={setFollowingIndexModal} /> : <></> }\n    { followersIndexModal ? <FollowersIndex user={user} setFollowersIndexModal={setFollowersIndexModal} /> : <></> }\n   </Fragment>\n  )\n}\n\nexport default Profile","/front/app/src/components/Home.tsx",["198","199","200","201","202","203"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport { MainContext } from '../App';\nimport '../ScssFile/Home.scss'\nimport axios from 'axios';\nimport { useHistory, Link, useParams } from 'react-router-dom';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport StarIcon from '@mui/icons-material/Star';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport { amber, grey, brown } from '@mui/material/colors';\nimport { url } from \"../config\";\nimport { TypePost } from '../TypeDefinition/Type';\nfunction Home() {\n  const context = useContext(MainContext)\n  const loggedInStatus = context.loggedInStatus\n  const bookmarkCreate = context.bookmarkCreate\n  const bookmarkDestroy = context.bookmarkDestroy\n  const heartCreate = context.heartCreate\n  const heartDestroy = context.heartDestroy\n  const { id } = useParams<{id: string}>();\n  const numericId = parseInt(id);\n  const history = useHistory();\n  const [postall, setPostall] = useState<TypePost[]>([]);\n  const [pagecount, setPagecount] = useState(1);\n  const [currentPage, setCurrentPage] = useState(numericId);\n  const page = [...Array(pagecount).keys()].map((i) => i + 1);\n  const [bookmarkedPosts, setBookmarkedPosts] = useState<number[]>([]);\n  const [heartedPosts, setHeartedPosts] = useState<number[]>([]);\n  const [postExist, setPostExist] = useState(true);\n\n  useEffect(() => {\n    setPostall([])\n    window.scrollTo(0, 0);\n    postAllGet();\n  }, [id]);\n\n  const postShow = (id: number) => {\n    history.push(`/posts/${id}`)\n  };\n\n  const postAllGet = () =>{\n     axios.get(`${url}/posts`, { params: { page: currentPage }, withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        const data = response.data.post_all\n        setPostall(data)\n        setPagecount(response.data.total_pages)\n        console.log(\"投稿取得成功\")\n        console.log(data)\n        for (let i = 0; i < data.length; i++) {\n          bookmarkExist(data[i]);\n        }\n        for (let i = 0; i < data.length; i++) {\n          heartExist(data[i]);\n        }\n        setPostExist(true)\n      } else {\n        setPostExist(false)\n        console.log(\"投稿なし\")\n      }\n    })\n    .catch(error => {\n      console.log(\"投稿取得エラー\", error)\n    })\n  };\n\n  const postAdd = (page: number) => {\n    setCurrentPage(page)\n    history.push(`/home/page/${page}`)\n    window.scrollTo(0, 0);\n  };\n\n  const postBack = (currentPage: number) => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1)\n      history.push(`/home/page/${currentPage - 1}`)\n      }\n    window.scrollTo(0, 0);\n  };\n\n  const postGo = (currentPage: number) => {\n    if (currentPage !== pagecount) {\n      setCurrentPage(currentPage + 1)\n      history.push(`/home/page/${currentPage + 1}`)\n    }\n    window.scrollTo(0, 0);\n  };\n\n  const handleBookmark = (post: TypePost) => {\n   if  (bookmarkedPosts.includes(post.id)) {\n    bookmarkDestroy(post)\n    setBookmarkedPosts(bookmarkedPosts.filter(id => id !== post.id));\n   } else {\n    bookmarkCreate(post)\n    if (loggedInStatus === \"ログインなう\") {\n     setBookmarkedPosts([...bookmarkedPosts, post.id]);\n    }\n   }\n  };\n\n  const bookmarkExist = (post: TypePost) => {\n    setBookmarkedPosts((prevBookmarkedPosts) => {\n      if (post.bookmarks && post.bookmarks[0]) {\n        return [...prevBookmarkedPosts, post.id];\n      } else {\n        return prevBookmarkedPosts.filter(id => id !== post.id);\n      }\n    });\n  };\n\n  const handleHeart = (post: TypePost) => {\n    if  (heartedPosts.includes(post.id)) {\n     heartDestroy(post)\n     setHeartedPosts(heartedPosts.filter(id => id !== post.id));\n     post.heart_count = post.heart_count - 1\n    } else {\n     heartCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setHeartedPosts([...heartedPosts, post.id]);\n      post.heart_count = post.heart_count + 1\n     }\n    }\n  };\n\n  const heartExist = (post: TypePost) => {\n    setHeartedPosts((prevHeartedPosts) => {\n      if (post.hearts && post.hearts[0]) {\n        return [...prevHeartedPosts, post.id];\n      } else {\n        return prevHeartedPosts.filter(id => id !== post.id);\n      }\n    });\n  };\n\n  return (\n    <Fragment> \n      { postExist ? \n         <></> \n           : \n         <Fragment>\n           <div className='post_not_exist'>\n             <h1>誰も投稿してないの??????????</h1>\n             <HighlightOffIcon className='highlight_off_icon' style={{fontSize: '60px'}}/>\n           </div>\n         </Fragment>\n      } \n      { postall[0] ? \n      <div className='post_container'>\n       {postall.map((value: TypePost, key: number) => {\n         let iconColor;\n\n         if (key === 0) {\n           iconColor = amber[500]; // 金色\n         } else if (key === 1) {\n           iconColor = grey[500]; // 銀色\n         } else if (key === 2) {\n           iconColor = brown[500]; // 銅色\n         }\n         return (\n         <div className='post' key={key} onClick={() => postShow(postall[key].id)}>\n           <div className='head'>\n             <div className='icon'>\n               <img src={value.user.avatar.url}></img>\n               {key <= 2 && currentPage < 2 ? (\n                <Fragment>\n                 <StarIcon style={{ color: iconColor, fontSize: '60px', position: 'relative', top: '33px', right: '36px'}} />\n                 <h2>{key +1}</h2>\n                </Fragment>\n               ) : <></>\n               }\n             </div>\n               <Link to={`/profile/${value.user.id}/page/1`}\n                  onClick={(e) => {e.stopPropagation();} }>\n                     {value.user.name}\n               </Link>\n               <div className='bookmark' onClick={(e) => {e.stopPropagation(); handleBookmark(value); } }>\n                    {bookmarkedPosts.includes(value.id) ? <BookmarkIcon/> : <BookmarkBorderIcon/>}\n               </div>\n           </div>\n           <div className='middle'>\n              { value.file_type === \"image\" ? <img src={value.thumbnail.url}></img> : <></> }\n              { value.file_type === \"video\" ? \n                  <Fragment>\n                    <img src={value.thumbnail.url}></img>\n                    <PlayCircleOutlineIcon className='play_icon' style={{fontSize: '50px', color: 'white', fontWeight: '200'}}/> \n                  </Fragment>\n                     : \n                  <></> \n              }\n           </div>\n           <div className='foot'>\n             <a>{value.title}</a>\n             <div className='favorite' onClick={(e) => {e.stopPropagation(); handleHeart(value); }}>\n                  {heartedPosts.includes(value.id) ? <FavoriteIcon style={{ color: 'red' }}/> : <FavoriteBorder/>}\n             </div>\n             <a className='heart_count'>{value.heart_count}</a>\n           </div>\n         </div>\n         )\n       })}\n      </div>\n      : <></> }\n      { postall.length === 0 && postExist ? \n               <div className='post_skeleton_container'>\n                 {[...Array(27).keys()].map(i =>\n                    <div className='post_skeleton'></div>\n                 )}\n               </div> :\n      <div className='pagenate_container'>\n       {pagecount > 1 ? \n       <div className='pagenate'>\n        <button className='page_move' onClick={() => postBack(currentPage)}><NavigateBeforeIcon/></button>\n        { currentPage === 1 ? \"\" :\n         <button \n           className={1 === currentPage ? 'active' : ''}\n           onClick={() => postAdd(1)}>\n              1\n          </button>}\n        {pagecount > 6 && currentPage > pagecount - 6 ? \n        page.slice(pagecount - 6, pagecount ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         )) :\n        page.slice(currentPage < 7 && currentPage !== 1 ? 1 : currentPage - 1, currentPage === 1 ? currentPage + 6 : currentPage < 7 ? 7 : currentPage + 5 ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         ))}\n        <button className='page_move' \n           onClick={() => postGo(currentPage)}>\n            <NavigateNextIcon/>\n        </button>\n       </div> : <></> }\n      </div>}\n   </Fragment>\n  )\n} \n\nexport default Home","/front/app/src/components/Following.tsx",["204","205","206","207","208","209","210"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport '../ScssFile/Home.scss'\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport StarIcon from '@mui/icons-material/Star';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport { amber, grey, brown } from '@mui/material/colors';\nimport { url } from \"../config\";\nimport { MainContext } from '../App';\nimport { TypePost } from '../TypeDefinition/Type';\nfunction Following() {\n  const context = useContext(MainContext)\n  const bookmarkCreate = context.bookmarkCreate\n  const bookmarkDestroy = context.bookmarkDestroy\n  const heartCreate = context.heartCreate\n  const heartDestroy = context.heartDestroy\n  const { id } = useParams<{id: string}>();\n  const numericId = parseInt(id);\n  const history = useHistory();\n  const [postall, setPostall] = useState<TypePost[]>([]);\n  const [pagecount, setPagecount] = useState(1);\n  const [currentPage, setCurrentPage] = useState(numericId);\n  const page = [...Array(pagecount).keys()].map((i) => i + 1);\n  const [bookmarkedPosts, setBookmarkedPosts] = useState<number[]>([]);\n  const [heartedPosts, setHeartedPosts] = useState<number[]>([]);\n  const [postExist, setPostExist] = useState(true);\n\n  useEffect(() => {\n    setPostall([])\n    window.scrollTo(0, 0);\n    postAllGet();\n  }, [id])\n\n  const postShow = (id: number) => {\n    history.push(`/posts/${id}`)\n  }\n  const postAllGet = () =>{\n     axios.get(`${url}/following`, { params: { page: currentPage }, withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        const data = response.data.post_all\n        setPostall(data)\n        setPagecount(response.data.total_pages)\n        console.log(\"投稿取得成功\")\n        for (let i = 0; i < data.length; i++) {\n          bookmarkExist(data[i]);\n        }\n        for (let i = 0; i < data.length; i++) {\n          heartExist(data[i]);\n        }\n        setPostExist(true)\n      } else {\n        setPostExist(false)\n        console.log(\"投稿なし\")\n      }\n    })\n    .catch(error => {\n      console.log(\"投稿取得エラー\", error)\n    })\n  }\n  const postAdd = (page: number) => {\n    setCurrentPage(page)\n    history.push(`/following/page/${page}`)\n    window.scrollTo(0, 0);\n  }\n  const postBack = (currentPage: number) => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1)\n      history.push(`/following/page/${currentPage - 1}`)\n      }\n    window.scrollTo(0, 0);\n  }\n  const postGo = (currentPage: number) => {\n    if (currentPage !== pagecount) {\n      setCurrentPage(currentPage + 1)\n      history.push(`/following/page/${currentPage + 1}`)\n    }\n    window.scrollTo(0, 0);\n  }\n  const handleBookmark = (post: TypePost) => {\n   if  (bookmarkedPosts.includes(post.id)) {\n    bookmarkDestroy(post)\n    setBookmarkedPosts(bookmarkedPosts.filter(id => id !== post.id));\n    console.log(bookmarkedPosts)\n   } else {\n    bookmarkCreate(post)\n    setBookmarkedPosts([...bookmarkedPosts, post.id]);\n   }\n  }\n  const bookmarkExist = (post: TypePost) => {\n    setBookmarkedPosts((prevBookmarkedPosts) => {\n      if (post.bookmarks && post.bookmarks[0]) {\n        return [...prevBookmarkedPosts, post.id];\n      } else {\n        return prevBookmarkedPosts.filter(id => id !== post.id);\n      }\n    });\n  }\n  const handleHeart = (post: TypePost) => {\n    if  (heartedPosts.includes(post.id)) {\n     heartDestroy(post)\n     setHeartedPosts(heartedPosts.filter(id => id !== post.id));\n     post.heart_count = post.heart_count - 1\n     console.log(heartedPosts)\n    } else {\n     heartCreate(post)\n     setHeartedPosts([...heartedPosts, post.id]);\n     post.heart_count = post.heart_count + 1\n    }\n   }\n  const heartExist = (post: TypePost) => {\n    setHeartedPosts((prevHeartedPosts) => {\n      if (post.hearts && post.hearts[0]) {\n        return [...prevHeartedPosts, post.id];\n      } else {\n        return prevHeartedPosts.filter(id => id !== post.id);\n      }\n    });\n  }\n\n  return (\n    <Fragment> \n      { postExist ? \n         <></> \n           : \n         <Fragment>\n           <div className='post_not_exist'>\n             <h1>好きなユーザーをフォローしましょう!</h1>\n             <img className='highlight_off_icon' src='https://assets.st-note.com/img/1689656664988-phTXkWUO83.png?width=800'/>\n           </div>\n         </Fragment>\n      } \n      { postall[0] ? \n      <div className='post_container'>\n       {postall.map((value: TypePost, key: number) => {\n         let iconColor;\n\n         if (key === 0) {\n           iconColor = amber[500]; // 金色\n         } else if (key === 1) {\n           iconColor = grey[500]; // 銀色\n         } else if (key === 2) {\n           iconColor = brown[500]; // 銅色\n         }\n         return (\n         <div className='post' key={key} onClick={() => postShow(postall[key].id)}>\n           <div className='head'>\n             <div className='icon'>\n               <img src={value.user.avatar.url}></img>\n               {key <= 2 && (\n                <Fragment>\n                 <StarIcon style={{ color: iconColor, fontSize: '60px', position: 'relative', top: '33px', right: '36px'}} />\n                 <h2>{key +1}</h2>\n                </Fragment>\n               )}\n             </div>\n               <Link to={`/profile/${value.user.id}/page/1`}\n                  onClick={(e) => {e.stopPropagation();} }>\n                     {value.user.name}\n               </Link>\n               <div className='bookmark' onClick={(e) => {e.stopPropagation(); handleBookmark(value); } }>\n                    {bookmarkedPosts.includes(value.id) ? <BookmarkIcon/> : <BookmarkBorderIcon/>}\n               </div>\n           </div>\n           <div className='middle'>\n              { value.file_type === \"image\" ? <img src={value.thumbnail.url}></img> : <></> }\n              { value.file_type === \"video\" ? \n                  <Fragment>\n                    <img src={value.thumbnail.url}></img>\n                    <PlayCircleOutlineIcon className='play_icon' style={{fontSize: '50px', color: 'white', fontWeight: '200'}}/> \n                  </Fragment>\n                     : \n                  <></> \n              }\n           </div>\n           <div className='foot'>\n             <a>{value.title}</a>\n             <div className='favorite' onClick={(e) => {e.stopPropagation(); handleHeart(value); }}>\n                  {heartedPosts.includes(value.id) ? <FavoriteIcon style={{ color: 'red' }}/> : <FavoriteBorder/>}\n             </div>\n             <a className='heart_count'>{value.heart_count}</a>\n           </div>\n         </div>\n         )\n       })}\n      </div>\n      : <></> }\n      { postall.length === 0 && postExist ? \n               <div className='post_skeleton_container'>\n                 {[...Array(20).keys()].map(i =>\n                    <div className='post_skeleton'></div>\n                 )}\n               </div> :\n      <div className='pagenate_container'>\n       {pagecount > 1 ? \n       <div className='pagenate'><nav className='back'>back</nav>\n        <button className='page_move' onClick={() => postBack(currentPage)}><NavigateBeforeIcon/></button>\n        { currentPage === 1 ? \"\" :\n         <button \n           className={1 === currentPage ? 'active' : ''}\n           onClick={() => postAdd(1)}>\n              1\n          </button>}\n        {pagecount > 6 && currentPage > pagecount - 6 ? \n        page.slice(pagecount - 6, pagecount ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         )) :\n        page.slice(currentPage < 7 && currentPage !== 1 ? 1 : currentPage - 1, currentPage === 1 ? currentPage + 6 : currentPage < 7 ? 7 : currentPage + 5 ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         ))}\n        <button className='page_move' \n           onClick={() => postGo(currentPage)}>\n            <NavigateNextIcon/>\n        </button>\n        <nav className='next'>next</nav>\n       </div> : <></> }\n      </div>}\n   </Fragment>\n  )\n} \n\nexport default Following","/front/app/src/components/UpdateEmail.tsx",["211"],[],"import axios from 'axios'\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { url } from \"../config\";\nimport '../ScssFile/PasswordResetForm.scss'\nfunction UpdateEmail() {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    criteriaMode: 'all',\n  });\n  const { id } = useParams<{id: string}>();\n  const { newEmail } = useParams<{newEmail: string}>();\n  const onSubmit = () => {\n    axios.put(`${url}/update_emails/1`,{user: {email: newEmail, id: id}},{ withCredentials: true }\n    ).then(response => {\n        if (response.data.status === true) {\n          window.location.pathname = \"/\";\n        } \n    }).catch(error => {\n       console.log()\n    })\n  }\n  return (\n    <div className='reset_form'>\n        <form className=\"form\">\n             <h1>入力してください</h1>\n                <label>パスワード</label><br></br>\n                <input className={errors.password ? 'input_errors' : 'input'}\n                    type=\"password\"\n                    {...register('password', { required: true, minLength: 6})}                     \n                /><br></br>\n                {errors.password?.type === 'required' && (\n                  <div className='errors'>※パスワードが入力されていません</div>\n                )}\n                {errors.password?.type === 'minLength' && (\n                  <div className='errors'>※パスワードが短すぎます!</div>\n                )}\n                <label>パスワード確認</label><br></br>\n                <input className={errors.passwordConfirmation ? 'input_errors' : 'input'}\n                    type=\"password\"\n                    {...register('passwordConfirmation', { \n                      required: true, \n                      minLength: 6,\n                      validate: (value) =>\n                      value === watch('password'),\n                    })}                     \n                /><br></br>\n                {errors.passwordConfirmation?.type === 'required' && (\n                  <div className='errors'>※パスワードが入力されていません</div>\n                )}\n                {errors.passwordConfirmation?.type === 'minLength' && (\n                  <div className='errors'>※パスワードが短すぎます!</div>\n                )}\n                {errors.passwordConfirmation?.type === 'validate' && (\n                  <div className='errors'>※パスワードが一致しません</div>\n                )}\n                <button className='btn' type=\"button\" onClick={handleSubmit(onSubmit)}>送信</button><br></br>\n                <a className='password-warn'>パスワードは英文字または数字で6桁以上入力してください</a><br></br>\n        </form>\n    </div>\n  )\n}\n\nexport default UpdateEmail","/front/app/src/components/Search.tsx",["212","213","214","215","216","217","218"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport '../ScssFile/Home.scss'\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Link } from \"react-router-dom\";\nimport { useParams } from 'react-router-dom';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore';\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport StarIcon from '@mui/icons-material/Star';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport { amber, grey, brown } from '@mui/material/colors';\nimport { url } from \"../config\";\nimport { MainContext } from '../App';\nimport { TypePost } from '../TypeDefinition/Type';\nfunction Search() {\n  const context = useContext(MainContext);\n  const loggedInStatus = context.loggedInStatus;\n  const bookmarkCreate = context.bookmarkCreate;\n  const bookmarkDestroy = context.bookmarkDestroy;\n  const heartCreate = context.heartCreate;\n  const heartDestroy = context.heartDestroy;\n  const { id } = useParams<{id: string}>();\n  const { query } = useParams<{query: string}>();\n  const numericId = parseInt(id);\n  const history = useHistory();\n  const [postall, setPostall] = useState<TypePost[]>([]);\n  const [pagecount, setPagecount] = useState(1);\n  const [currentPage, setCurrentPage] = useState(numericId);\n  const page = [...Array(pagecount).keys()].map((i) => i + 1);\n  const [bookmarkedPosts, setBookmarkedPosts] = useState<number[]>([]);\n  const [heartedPosts, setHeartedPosts] = useState<number[]>([]);\n  const [postExist, setPostExist] = useState(true);\n\n  useEffect(() => {\n    setPostExist(true)\n    setPostall([])\n    postAllGet();\n  }, [id]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    setPostExist(true)\n    setPostall([])\n    setPagecount(1)\n    setCurrentPage(1)\n    postAllGet();\n    setCurrentPage(numericId)\n  }, [query]);\n\n  const postShow = (id: number) => {\n    history.push(`/posts/${id}`)\n  };\n\n  const postAllGet = () =>{\n     axios.get(`${url}/search/${query}`, { params: { page: currentPage }, withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        const data = response.data.post_all\n        setPostall(data)\n        setPagecount(response.data.total_pages)\n        console.log(\"投稿取得成功\")\n        for (let i = 0; i < data.length; i++) {\n          bookmarkExist(data[i]);\n        }\n        for (let i = 0; i < data.length; i++) {\n          heartExist(data[i]);\n        }\n        setPostExist(true)\n      } else {\n        setPagecount(0)\n        setPostExist(false)\n        console.log(\"投稿なし\")\n      }\n    })\n    .catch(error => {\n      console.log(\"投稿取得エラー\", error)\n    })\n  };\n\n  const postAdd = (page: number) => {\n    setCurrentPage(page)\n    history.push(`/search/${query}/page/${page}`)\n    window.scrollTo(0, 0);\n  };\n\n  const postBack = (currentPage: number) => {\n    if (currentPage !== 1) {\n      setCurrentPage(currentPage - 1)\n      history.push(`/search/${query}/page/${currentPage - 1}`)\n      }\n    window.scrollTo(0, 0);\n  };\n\n  const postGo = (currentPage: number) => {\n    if (currentPage !== pagecount) {\n      setCurrentPage(currentPage + 1)\n      history.push(`/search/${query}/page/${currentPage + 1}`)\n    }\n    window.scrollTo(0, 0);\n  };\n\n  const handleBookmark = (post: TypePost) => {\n    if  (bookmarkedPosts.includes(post.id)) {\n     bookmarkDestroy(post)\n     setBookmarkedPosts(bookmarkedPosts.filter(id => id !== post.id));\n    } else {\n     bookmarkCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setBookmarkedPosts([...bookmarkedPosts, post.id]);\n     }\n    }\n  };\n\n  const bookmarkExist = (post: TypePost) => {\n    setBookmarkedPosts((prevBookmarkedPosts) => {\n      if (post.bookmarks && post.bookmarks[0]) {\n        return [...prevBookmarkedPosts, post.id];\n      } else {\n        return prevBookmarkedPosts.filter(id => id !== post.id);\n      }\n    });\n  };\n\n  const handleHeart = (post: TypePost) => {\n    if  (heartedPosts.includes(post.id)) {\n     heartDestroy(post)\n     setHeartedPosts(heartedPosts.filter(id => id !== post.id));\n     post.heart_count = post.heart_count - 1\n    } else {\n     heartCreate(post)\n     if (loggedInStatus === \"ログインなう\") {\n      setHeartedPosts([...heartedPosts, post.id]);\n      post.heart_count = post.heart_count + 1\n     }\n    }\n  };\n\n  const heartExist = (post: TypePost) => {\n    setHeartedPosts((prevHeartedPosts) => {\n      if (post.hearts && post.hearts[0]) {\n        return [...prevHeartedPosts, post.id];\n      } else {\n        return prevHeartedPosts.filter(id => id !== post.id);\n      }\n    });\n  };\n  return (\n    <Fragment> \n      { postExist ? \n         <></> \n           : \n         <Fragment>\n           <div className='post_not_exist'>\n             <h1>投稿が見つかりませんでした。</h1>\n             <HighlightOffIcon className='highlight_off_icon' style={{fontSize: '60px'}}/>\n           </div>\n         </Fragment>\n      } \n      { postall[0] ? \n      <Fragment>\n      <h2 className='saerch_or_category_query'>「{query}」の検索結果</h2>\n      <div className='post_container'>\n       {postall.map((value, key) => {\n         let iconColor;\n\n         if (key === 0) {\n           iconColor = amber[500]; // 金色\n         } else if (key === 1) {\n           iconColor = grey[500]; // 銀色\n         } else if (key === 2) {\n           iconColor = brown[500]; // 銅色\n         }\n         return (\n         <div className='post' key={key} onClick={() => postShow(postall[key].id)}>\n           <div className='head'>\n             <div className='icon'>\n               <img src={value.user.avatar.url}></img>\n               {key <= 2 && (\n                <Fragment>\n                 <StarIcon style={{ color: iconColor, fontSize: '60px', position: 'relative', top: '33px', right: '36px'}} />\n                 <h2>{key +1}</h2>\n                </Fragment>\n               )}\n             </div>\n               <Link to={`/profile/${value.user.id}/page/1`}\n                  onClick={(e) => {e.stopPropagation();} }>\n                     {value.user.name}\n               </Link>\n               <div className='bookmark' onClick={(e) => {e.stopPropagation(); handleBookmark(value); } }>\n                    {bookmarkedPosts.includes(value.id) ? <BookmarkIcon/> : <BookmarkBorderIcon/>}\n               </div>\n           </div>\n           <div className='middle'>\n              { value.file_type === \"image\" ? <img src={value.thumbnail.url}></img> : <></> }\n              { value.file_type === \"video\" ? \n                  <Fragment>\n                    <img src={value.thumbnail.url}></img>\n                    <PlayCircleOutlineIcon className='play_icon' style={{fontSize: '50px', color: 'white', fontWeight: '200'}}/> \n                  </Fragment>\n                     : \n                  <></> \n              }\n           </div>\n           <div className='foot'>\n             <a>{value.title}</a>\n             <div className='favorite' onClick={(e) => {e.stopPropagation(); handleHeart(value); }}>\n                  {heartedPosts.includes(value.id) ? <FavoriteIcon style={{ color: 'red' }}/> : <FavoriteBorder/>}\n             </div>\n             <a className='heart_count'>{value.heart_count}</a>\n           </div>\n         </div>\n         )\n       })}\n      </div>\n      </Fragment>\n      : <></> }\n      { postall.length === 0 && postExist ? \n               <div className='post_skeleton_container'>\n                 {[...Array(20).keys()].map(i =>\n                    <div className='post_skeleton'></div>\n                 )}\n               </div> :\n      <div className='pagenate_container'>\n       {pagecount > 1 ? \n       <div className='pagenate'><nav className='back'>back</nav>\n        <button className='page_move' onClick={() => postBack(currentPage)}><NavigateBeforeIcon/></button>\n        { currentPage === 1 ? \"\" :\n         <button \n           className={1 === currentPage ? 'active' : ''}\n           onClick={() => postAdd(1)}>\n              1\n          </button>}\n        {pagecount > 6 && currentPage > pagecount - 6 ? \n        page.slice(pagecount - 6, pagecount ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         )) :\n        page.slice(currentPage < 7 && currentPage !== 1 ? 1 : currentPage - 1, currentPage === 1 ? currentPage + 6 : currentPage < 7 ? 7 : currentPage + 5 ).map((page) => (\n         <button \n          className={page === currentPage ? 'active' : ''}\n          onClick={() => postAdd(page)}>\n              {page}\n         </button>\n         ))}\n        <button className='page_move' \n           onClick={() => postGo(currentPage)}>\n            <NavigateNextIcon/>\n        </button>\n        <nav className='next'>next</nav>\n       </div> : <></> }\n      </div>}\n   </Fragment>\n  )\n} \n\nexport default Search","/front/app/src/components/Postform.tsx",["219","220","221","222","223","224","225","226","227"],[],"import { Fragment, useState, useEffect } from 'react';\nimport '../ScssFile/PostForm.scss'\nimport axios from 'axios'\nimport { useHistory } from 'react-router-dom';\nimport { CategoryData } from './ListData';\nimport { DishData } from './ListData';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CameraAltIcon from '@mui/icons-material/CameraAlt';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport { url } from \"../config\";\nimport { TypeDishExpand, TypeFileDetails } from '../TypeDefinition/Type';\ntype Props = {\n  setPostModal: React.Dispatch<React.SetStateAction<boolean>>\n}\nfunction PostForm(props: Props) {   \n  const history = useHistory();\n  const [posted, setPosted] = useState(false)\n  const [title, setTitle] = useState(\"\")\n  const titlelength = 30 - title.length\n  const [category, setCategory] = useState(\"なし\")\n  const [categoryModal, setCategoryModal] = useState(false)\n  const [dishExpand, setDishExpand] = useState<TypeDishExpand>({\n    0: false,\n    1: false,\n    2: false,\n    3: false,\n    4: false,\n    5: false,\n    6: false,\n    7: false,\n  });\n  const [imageOrVideo, setImageOrVideo] = useState<TypeFileDetails>()\n  const [imageOrVideoPreview, setImageOrVideoPreview] = useState<string | ArrayBuffer | null>(null)\n  const [thumbnail, setThumbnail] = useState<TypeFileDetails>()\n  const [thumbnailPreview, setThumbnailPreview] = useState<string | ArrayBuffer | null>(null)\n  const [time, setTime] = useState(\"\")\n  const [cost, setCost] = useState(\"\")\n  const [content, setContent] = useState(\"\")\n  const [numberOfPeople, setNumberOfPeople] = useState(\"\")\n  const [materialCount, setMaterialCount] = useState(1)\n  const [materialFields, setMaterialFields] = useState<{material: string, amount: string}[]>([\n    { material: \"\", amount: \"\" }\n  ]);\n  const [materialError, setMaterialError] = useState('')\n  const [process, setProcess] = useState(\"\")\n  const [coment, setComent] = useState(\"\")\n  const imageOrVideoFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.target.files && setImageOrVideo(event.target.files[0])\n    const reader = new FileReader()\n         reader.onload = (event: ProgressEvent<FileReader>) => {\n             event.target && setImageOrVideoPreview(event.target.result)\n         };\n         event.target.files && reader.readAsDataURL(event.target.files[0])\n  }\n  const thumbnailFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.target.files && setThumbnail(event.target.files[0])\n    const reader = new FileReader()\n         reader.onload = (event: ProgressEvent<FileReader>) => {\n             event.target && setThumbnailPreview(event.target.result)\n             event.target && console.log(event.target.result)\n         };\n         event.target.files && reader.readAsDataURL(event.target.files[0])\n  }\n  const materialChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const newFields = [...materialFields];\n    newFields[index].material = e.target.value;\n    setMaterialFields(newFields);\n  };\n  const amountChange = (e:  React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const newFields = [...materialFields];\n    newFields[index].amount = e.target.value;\n    setMaterialFields(newFields);\n  };\n  const materialRemove = () => {\n   if (materialCount > 1) {\n   const newMaterialFields = [...materialFields];\n   newMaterialFields.pop();\n   setMaterialFields(newMaterialFields);\n   setMaterialCount(materialCount - 1)\n   setMaterialError(\"\");\n   }\n  };\n  const MaterialAdd = () => {\n    if (materialCount < 15){\n     setMaterialCount(materialCount + 1)\n     setMaterialFields([...materialFields, { material: \"\", amount: \"\" }]);\n     console.log(materialFields)\n    } else {\n     setMaterialError('※これ以上追加できません')\n    }\n  }\n  const CloseModal = () => {\n    props.setPostModal(false)\n    setTitle(\"\")\n    setCategory(\"なし\")\n    setImageOrVideo(undefined)\n    setImageOrVideoPreview(null)\n    setThumbnailPreview(null)\n    setContent(\"\")\n    setCost(\"\")\n    setTime(\"\")\n    setComent(\"\")\n    setProcess(\"\")\n    setMaterialFields([\n      { material: \"\", amount: \"\" }\n    ])\n    setMaterialCount(1)\n    setMaterialError(\"\")\n  }\n  const postRequired = () => {\n    if (posted) {\n      return false;\n    } \n    return title&&imageOrVideo&&imageOrVideoPreview&&content&&time&&cost&&process&&coment&&materialFields[0].material&&materialFields[0].amount;\n  }\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setPosted(true)\n    const formData = new FormData();\n    formData.append('post[title]', title);\n    formData.append('post[category]', category);\n    imageOrVideo && formData.append('post[image]', imageOrVideo);\n    thumbnail && formData.append('post[thumbnail]', thumbnail);\n    formData.append('post[content]', content);\n    formData.append('post[time]', time);\n    formData.append('post[cost]', cost);\n    formData.append('post[process]', process);\n    formData.append('post[coment]', coment);\n    formData.append('post[number_of_people]', numberOfPeople);\n    for (let i = 0; i < materialFields.length; i++) {\n      formData.append(`post[material_${i + 1}]`, materialFields[i].material);\n      formData.append(`post[amount_${i + 1}]`, materialFields[i].amount);\n    }\n    axios.post(`${url}/posts`, formData\n                                              ,{ withCredentials: true })\n      .then(response => {\n        if (response.data.status) {\n          CloseModal()\n          history.push(\"/\")\n        } else if (response.data.status === 'not_created') {\n          console.log(\"失敗\")\n        }\n      })\n      .catch((error) => {\n        event.preventDefault()\n        console.log(\"未送信\")\n      });\n  };\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  },[])\n  return (\n   <Fragment>\n    <div className='back_display'>\n\n    </div>\n           <div className='postform_modal'>\n            <div className='postform_modal_inner'>\n             <div className='postform_modal_content'>\n             <h1>レシピ投稿:</h1>\n             <form className=\"form_post\" onSubmit={event => onSubmit(event)}>\n             <div className='image_container'>\n             {thumbnail ? (\n                <></>\n             ) : (\n             <div className='thumbnail_border'>\n               <label className='thumbnail_file'>\n                 <CameraAltIcon style={{ fontSize: '67px' }} />\n                   <input\n                     className='thumbnail'\n                     type=\"file\"\n                     accept='image/*'\n                     capture=\"environment\"\n                     name=\"thumbnail\"\n                     onChange={thumbnailFile}\n                   />\n                   <h3>サムネイル</h3>\n               </label>\n             </div>\n             )}\n               {thumbnail && thumbnail.type && typeof thumbnail.type === 'string' && thumbnail.type.startsWith(\"video/\") ? (\n                  thumbnailPreview && !(thumbnailPreview instanceof ArrayBuffer) && <video controls src={thumbnailPreview} className='thumbnail_display'></video>\n               ) : thumbnail && thumbnail.type && typeof thumbnail.type === 'string' && thumbnail.type.startsWith(\"image/\") ? (\n                  thumbnailPreview && !(thumbnailPreview instanceof ArrayBuffer) && <img src={thumbnailPreview} className='thumbnail_display'></img>\n               ) : (\n                 <></>\n               )}\n               {imageOrVideo ? <></> : \n               <div className='image_border'>\n                <label className='image_file'>\n                <CameraAltIcon style={{ fontSize: '67px' }} />\n                  <input className='image'\n                    type=\"file\"\n                    accept='video/*, image/*'\n                    capture=\"environment\"\n                    name=\"image\"\n                    onChange={event => imageOrVideoFile(event)}\n                  />\n                  <h3>コンテンツ</h3>\n                </label>\n               </div>\n               }\n                {imageOrVideo && imageOrVideo.type && typeof imageOrVideo.type === 'string' && imageOrVideo.type.startsWith(\"video/\") ? (\n                 imageOrVideoPreview && !(imageOrVideoPreview instanceof ArrayBuffer) && <video controls src={imageOrVideoPreview} className='image_display'></video>\n                 ) : imageOrVideo && imageOrVideo.type && typeof imageOrVideo.type === 'string' && imageOrVideo.type.startsWith(\"image/\") ? (\n                 imageOrVideoPreview && !(imageOrVideoPreview instanceof ArrayBuffer) && <img src={imageOrVideoPreview} className='image_display'></img>\n                 ) : (\n                 <></>\n                 )}\n             </div>\n                 <br />\n                { categoryModal &&\n                <Fragment>\n                  <div className='category_modal_inner'>\n                    <div className='category_modal_content'>\n                     <button className='reset' type='button' onClick={() => setCategory(\"なし\")}>なし</button>\n                     <div className='category_close' onClick={() => setCategoryModal(false)}><a><CloseIcon /></a></div>\n                      { CategoryData.map((value, key) => {\n                         return (\n                          <li className='category'>\n                           <img src={value.icon}></img>\n                           <a onClick={() => setCategory(value.title)}>{value.title}</a>\n                           { dishExpand[key] ?\n                             <Fragment>\n                              <ExpandLess\n                                style={{ position: 'relative', top: '7px', left: '6px', cursor: 'pointer' }} \n                                onClick={() =>\n                                setDishExpand(prevState => ({ ...prevState, [key]: false }))} \n                              />\n                              <ul>\n                               {Object.values(DishData[key]).map((dish) => (\n                                 dish ? <li className='dish' onClick={() => setCategory(`${value.title}／${dish}`)}>{dish}</li> : null\n                               ))}\n                              </ul> \n                             </Fragment> :\n                               <ExpandMore \n                                 style={{ position: 'relative', top: '7px', left: '6px', cursor: 'pointer' }} \n                                 onClick={() =>\n                                 setDishExpand(prevState => ({ ...prevState, [key]: true }))} \n                               /> }\n                          </li>\n                         )\n                      })}        \n                    </div>\n                  </div>\n                </Fragment>\n                }\n                <label>料理名: ※最大30文字</label>\n                { title && <a className={ titlelength === 0 ? 'title_length_errors' \n                                                                 :\n                                                               ''\n                                         }\n                            >　残り{titlelength}文字\n                            </a>\n                }\n                <button type='button' className='category_button' onClick={() => setCategoryModal(true)}>カテゴリ:　{category}</button>\n                <br></br>\n                <input className='title'\n                    maxLength={30}\n                    type=\"text\"\n                    placeholder='料理名'\n                    value={title}\n                    onChange={event => setTitle(event.target.value)}  \n                /><br></br>\n                <label>料理概要:</label><br/>\n                <textarea className='content'\n                    maxLength={300}\n                    name=\"content\"        \n                    placeholder='料理概要'\n                    value={content}\n                    onChange={event => setContent(event.target.value)}       \n                /><br/>\n                <button type=\"button\" className='content_button' onClick={() => setContent(\"\")}>取り消し</button>\n                <label>時間　</label>\n                <input className='input_time'\n                    maxLength={3}\n                    type=\"text\"\n                    name=\"time\"\n                    value={time}\n                    onChange={event => setTime(event.target.value)}\n                />　分\n                <label>　　　　　費用　</label>\n                <input className='input_cost'\n                    maxLength={5}\n                    type=\"text\"\n                    name=\"cost\"\n                    value={cost} \n                    onChange={event => setCost(event.target.value)}\n                />　円<br/>\n                <button type='button' className='material_add' onClick={MaterialAdd}>＋　行を追加</button>\n                <button type='button' className='material_remove' onClick={materialRemove}>ー　行を削除</button>\n                {materialError && <a className='material_errors'>　{materialError}</a>}\n                <input className='input_number_of_people' \n                    placeholder='何人分'\n                    onChange={event => setNumberOfPeople(event.target.value)}\n                />\n                <a style={{ fontSize: '12px', opacity: '0.6' }}> 例） 2人分</a>\n                <div className='material'>\n                 {materialFields.map((field: any, index: number) => {\n                  return (\n                   <div>\n                    <label>材料:</label>\n                    <input\n                     className='material_input'\n                     key={index}\n                     type=\"text\"\n                     value={field.material}\n                     onChange={(e) => materialChange(e, index)}\n                    />\n                    <label className='amount_label'>分量:</label>\n                    <input\n                     className='material_input'\n                     key={index}  \n                     type=\"text\"\n                     value={field.amount}\n                     onChange={(e) => amountChange(e, index)}\n                    />\n                   </div>\n                  );\n                  })}\n                </div>\n                 <label>作業工程:</label><br/>\n                 <textarea className='process'\n                    maxLength={300}\n                    name=\"process\"        \n                    placeholder='作業工程'\n                    value={process}\n                    onChange={event => setProcess(event.target.value)}       \n                 /><br/>\n                  <label>ひとこと:</label><br/>\n                 <textarea className='coment'\n                    maxLength={200}\n                    name=\"coment\"           \n                    placeholder='ひとこと'\n                    value={coment}\n                    onChange={event => setComent(event.target.value)}       \n                 /><br/>\n                 <button className={ posted ?  'posted_button' : 'post_button' } type=\"submit\" disabled={!postRequired()}>\n                   投稿する\n                 </button>\n             </form>\n             </div>\n           </div>\n           <button className='close' onClick={() => CloseModal()} disabled={posted}><a><CloseIcon /></a></button>\n         </div>\n       <div className='back_display'>\n\n       </div>\n   </Fragment>\n   )\n}\n\nexport default PostForm","/front/app/src/components/New.tsx",["228","229"],[],"import { Fragment, useEffect } from 'react';\nimport '../ScssFile/New.scss'\nimport axios from 'axios'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useForm } from 'react-hook-form';\nimport { url } from \"../config\";\ntype NewProps = {\n  newModal: boolean,\n  setFlashMessage: React.Dispatch<React.SetStateAction<string>>,\n  setNewModal: React.Dispatch<React.SetStateAction<boolean>>,\n  setModal: React.Dispatch<React.SetStateAction<boolean>>\n}\nfunction Newmodal(props: NewProps) {\n  const {\n      register,\n      reset,\n      watch,\n      handleSubmit,\n      formState: { errors },\n  } = useForm({\n    criteriaMode: 'all',\n    });\n  const name = watch('name', '')\n  const email = watch('email', '')\n  const password = watch('password', '')\n  const passwordConfirmation = watch('passwordConfirmation', '')\n\n  const CloseModal = () => {\n    props.setNewModal(false)\n    props.setModal(false)\n    reset();\n  }\n\n  const onSubmit = (event: any) => {\n    axios.post(`${url}/users`,\n        {\n            user: {\n                name: name,\n                email: email,\n                password: password,\n                password_confirmation: passwordConfirmation\n            }\n        },\n        { withCredentials: true }\n    ).then(response => {\n        if (response.data.status === 'created') {\n            CloseModal()\n            props.setFlashMessage(\"メールを確認してアカウントを有効にしてください。\")\n            setTimeout(() => {\n              props.setFlashMessage(\"\");\n            }, 5000);\n        }\n    }).catch(error => {\n        console.log(\"registration error\", error)\n    })\n    event.preventDefault()\n}\n\nuseEffect(() => {\n  document.body.style.overflow = 'hidden';\n  return () => {\n    document.body.style.overflow = 'auto';\n  };\n},[])\n\nreturn ( \n    <Fragment>\n        <div className=\"back_display2\">\n          \n        </div>\n        <div className=\"form_modal_new\">\n         <form className=\"form_new\">\n             <h1>アカウント作成</h1>\n                <label>名前</label><br></br>\n                <input className={errors.name ? 'input_errors' : 'input'}\n                    type=\"name\"\n                    {...register('name', { required: true, maxLength: 20})}\n                /><br></br>\n                {errors.name?.type === 'required' && (\n                  <div className='errors'>※名前が入力されていません</div>\n                )}\n                {errors.name?.type === 'maxLength' && (\n                  <div className='errors'>※名前が長すぎます!</div>\n                )}\n                <label>メールアドレス</label><br></br>\n                <input className={errors.email ? 'input_errors' : 'input'}\n                    type=\"email\"   \n                    {...register('email', { required: true, pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i})}                     \n                /><br></br>\n                {errors.email?.type === 'required' && (\n                  <div className='errors'>※メールアドレスが入力されていません</div>\n                )}\n                {errors.email?.type === 'pattern' && (\n                  <div className='errors'>※有効なメールアドレスを入力してください</div>\n                )}\n                <label>パスワード</label><br></br>\n                <input className={errors.password ? 'input_errors' : 'input'}\n                    type=\"password\"\n                    {...register('password', { required: true, minLength: 6})}                     \n                /><br></br>\n                {errors.password?.type === 'required' && (\n                  <div className='errors'>※パスワードが入力されていません</div>\n                )}\n                {errors.password?.type === 'minLength' && (\n                  <div className='errors'>※パスワードが短すぎます!</div>\n                )}\n                <label>パスワード確認</label><br></br>\n                <input className={errors.passwordConfirmation ? 'input_errors' : 'input'}\n                    type=\"password\"\n                    {...register('passwordConfirmation', { \n                      required: true, \n                      minLength: 6,\n                      validate: (value) =>\n                      value === watch('password'),\n                    })}                     \n                /><br></br>\n                {errors.passwordConfirmation?.type === 'required' && (\n                  <div className='errors'>※パスワードが入力されていません</div>\n                )}\n                {errors.passwordConfirmation?.type === 'minLength' && (\n                  <div className='errors'>※パスワードが短すぎます!</div>\n                )}\n                {errors.passwordConfirmation?.type === 'validate' && (\n                  <div className='errors'>※パスワードが一致しません</div>\n                )}\n                <button className='btn' type=\"button\" onClick={handleSubmit(onSubmit)}>アカウントを作成</button><br></br>\n                <a className='password-warn'>パスワードは英文字または数字で6桁以上入力してください</a><br></br>\n               <div className='close' onClick={() => CloseModal()}><a><CloseIcon /></a></div>\n            </form>\n        </div>\n\n          \n    </Fragment>\n)\n}\nexport default Newmodal;","/front/app/src/components/List.tsx",["230","231","232","233","234","235","236","237","238","239","240","241","242"],[],"import { Fragment, useState,useContext } from 'react';\nimport { MainContext } from '../App';\nimport '../ScssFile/List.scss'\nimport { Link, useHistory } from \"react-router-dom\";\nimport { ListData1, ListData2, CategoryData, DishData } from './ListData';\nimport { TypeDishExpand } from '../TypeDefinition/Type';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nfunction List() {\n const context = useContext(MainContext)\n const loggedInStatus = context.loggedInStatus\n const history = useHistory();\n const [categoryExpand, setCategoryExpand] = useState(false)\n const [dishExpand, setDishExpand] = useState<TypeDishExpand>({\n   0: false,\n   1: false,\n   2: false,\n   3: false,\n   4: false,\n   5: false,\n   6: false,\n   7: false,\n });\n return (\n <Fragment>\n    <div className=\"list_area\">\n      <div className='list_inner'>\n      <ul>\n      { loggedInStatus === \"ログインなう\" ?\n        ListData1.map((value, key) => {\n        return (\n         <Link to={value.link} className=\"list_link\">\n         <li key={key} className = {window.location.pathname === value.link \n                                     || \n                                    window.location.pathname.startsWith(\"/home/page\") && value.link.startsWith(\"/home/page\")\n                                      ? \n                                      \"list_active\" \n                                       : \n                                      \"list\"\n                                    }>\n            <a className='icon'> \n               {window.location.pathname === value.link  && value.icon2 ? value.icon2 : value.icon}\n            </a>\n            <a className='list_title'> \n               {value.title}\n            </a>\n         </li>\n         </Link>\n        )\n       })\n       : \n       <Link to={ListData1[0].link} className=\"list_link\">\n         <li className = {window.location.pathname === ListData1[0].link \n                                     || \n                                    window.location.pathname.startsWith(\"/home/page\") && ListData1[0].link.startsWith(\"/home/page\")\n                                      ? \n                                      \"list_active\" \n                                       : \n                                      \"list\"\n                                    }>\n            <a className='icon'> \n               {window.location.pathname === ListData1[0].link  && ListData1[0].icon2 ? ListData1[0].icon2 : ListData1[0].icon}\n            </a>\n            <a className='list_title'> \n               {ListData1[0].title}\n            </a>\n         </li>\n       </Link>\n      }\n      </ul>\n      <ul>\n         <li  className=\"list2\">\n            <a className='icon'> \n               {ListData2[0].icon}\n            </a>\n            <a className='list_title'>\n               {ListData2[0].title}\n            </a><br/>\n            <a className='category_expand' onClick={() => \n                                           categoryExpand ?  setCategoryExpand(false) : setCategoryExpand(true)}\n             >{ categoryExpand ? ListData2[1].icon2 : ListData2[1].icon }\n            </a>\n         </li>\n         { categoryExpand ? \n          CategoryData.map((value, key) => {\n          return (\n           <li className='category'>\n            <img src={value.icon}></img>\n            <a onClick={() => history.push(`/category/${value.title}/page/1`)}>{value.title}</a>\n            { dishExpand[key] ?\n             <>\n              <ExpandLess\n               style={{ position: 'relative', top: '7px', left: '6px', cursor: 'pointer' }} \n               onClick={() =>\n               setDishExpand(prevState => ({ ...prevState, [key]: false }))} \n              />\n               <ul>\n                {Object.values(DishData[key]).map((dish) => (\n                  dish ? <li className='dish' onClick={() => history.push(`/category/${value.title}／${dish}/page/1`)}>{dish}</li> : null\n                ))}\n               </ul> \n              </> :\n              <ExpandMore \n               style={{ position: 'relative', top: '7px', left: '6px', cursor: 'pointer' }} \n               onClick={() =>\n               setDishExpand(prevState => ({ ...prevState, [key]: true }))} \n              /> }\n           </li>\n           )\n          })\n          : <></> }\n      </ul>\n      </div>\n    </div>\n  </Fragment> \n );\n}\nexport default List;","/front/app/src/components/Footer.tsx",["243","244","245"],[],"import { Fragment } from 'react'\nimport '../ScssFile/Footer.scss'\ntype Props = {\n  setLogModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setNewModal: React.Dispatch<React.SetStateAction<boolean>>\n}\nfunction Footer(props: Props) {\n   const ShowLogModal = () => {\n    props.setLogModal(true)\n   }\n   const ShowNewModal = () => {\n    props.setNewModal(true)\n   }\n  return (\n    <Fragment>\n      <footer>\n       <div className='footer_title'>\n         <h2>Quicook..</h2>\n         <img className='footer_photo' src='http://illust-ryokka.jp/wp-content/uploads/2017/12/Cuisine-16.png'></img>\n       </div>\n        <h3>３分で作れるお手軽料理レシピが動画付きで見れる!</h3>\n        <a className='new' onClick={() => ShowNewModal()}>新規登録</a>\n        <a className='login' onClick={() => ShowLogModal()}>ログイン</a>\n      </footer>\n    </Fragment>\n  );\n}\n\nexport default Footer;","/front/app/src/components/Header.tsx",["246","247","248","249","250","251","252","253","254"],[],"import { useState, useContext } from 'react';\nimport { MainContext } from '../App';\nimport '../ScssFile/Header.scss'\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CreateIcon from '@mui/icons-material/Create';\ntype Props = {\n  setPostModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setLogModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setNewModal: React.Dispatch<React.SetStateAction<boolean>>;\n  setModal: React.Dispatch<React.SetStateAction<boolean>>;\n}\nfunction Header(props: Props) {\n const context = useContext(MainContext)\n const loggedInStatus = context.loggedInStatus\n const user = context.user\n const handleLogout = context.handleLogout\n const [searchQuery, setSearchQuery] = useState(\"\")\n const history = useHistory();\n const ShowLogModal = () => {\n  props.setLogModal(true)\n  props.setModal(true)\n }\n const ShowNewModal = () => {\n  props.setNewModal(true)\n  props.setModal(true)\n }\n const ShowPostModal = () => {\n  props.setPostModal(true)\n }\nif (loggedInStatus === '未ログイン') {\nreturn (\n    <header>\n        <Link to=\"/\" className=\"main_title title_link\">Quicook</Link>\n        <form className='search' onSubmit={event => event.preventDefault()}>\n         <input  \n           placeholder=\"料理名でレシピを探す。\"\n           value={searchQuery}\n           onChange={event => setSearchQuery(event.target.value)}\n         >\n         </input>\n         <a onClick={() => setSearchQuery(\"\")}><CloseIcon /></a>\n         <button className='search_button' onClick={() => searchQuery !== '' && history.push(`/search/${searchQuery}/page/1`)}><SearchIcon /></button>\n        </form>\n        <a className=\"log\" onClick={() => ShowLogModal()}>ログイン</a>\n        <a className=\"log\" onClick={() => ShowNewModal()}>新規登録</a>\n    </header>\n    );\n} else if (loggedInStatus === 'ログインなう') {\nreturn (\n    <header className=\"header_login\">\n      <Link to=\"/home/page/1\" className=\"main_title title_link\">Quicook</Link>\n      <Link to={`/profile/${user && user.id}/page/1`} className={window.location.pathname == `/profile/${user && user.id}/page/1` ? 'onprofile' : 'profile'}>\n      <img className='image'\n        src={user && user.avatar.url}>\n      </img>\n      </Link>\n      <form className='search' onSubmit={event => event.preventDefault()}>\n        <input  \n           placeholder=\"料理名でレシピを探す。\"\n           value={searchQuery}\n           onChange={event => setSearchQuery(event.target.value)}\n        >\n        </input>\n        <a onClick={() => setSearchQuery(\"\")}><CloseIcon /></a>\n        <button className='sarch_btn' onClick={() => searchQuery !== '' && history.push(`/search/${searchQuery}/page/1`)}><SearchIcon /></button>\n      </form>\n      <a className=\"log2\" onClick={() => handleLogout()}>ログアウト</a>\n      <a className='post_create' onClick={() => ShowPostModal()}><a><CreateIcon /></a></a>\n    </header>\n);\n} else {\n  return (\n    <></>\n  )\n}\n\n}\nexport default Header;","/front/app/src/components/Login.tsx",["255","256","257"],[],"import { Fragment, useState, useEffect, useContext } from 'react';\nimport { MainContext } from '../App';\nimport '../ScssFile/Login.scss'\nimport axios from 'axios'\nimport CloseIcon from '@mui/icons-material/Close';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { useHistory } from 'react-router-dom';\nimport { url } from \"../config\";\ntype LoginProps = {\n  logModal: boolean,\n  setFlashMessage: React.Dispatch<React.SetStateAction<string>>,\n  setLogModal: React.Dispatch<React.SetStateAction<boolean>>,\n  setModal: React.Dispatch<React.SetStateAction<boolean>>\n}\nfunction Logmodal(props: LoginProps) {\n  const context = useContext(MainContext)\n  const loggedInStatus = context.loggedInStatus\n  const handleLogin = context.handleLogin\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [errors_m, setErrors_m] = useState(\"\")\n  const [errors_m_sent, setErrors_m_sent] = useState(\"\")\n  const [passwordResetForm, setPasswordResetForm] = useState(false)\n  const [sentEmail, setSentEmail] = useState(\"\")\n  const history = useHistory();\n\n  const CloseModal = () => {\n    props.setLogModal(false)\n    props.setModal(false)\n    setErrors_m(\"\")\n  }\n\n  const onSubmit = (event: any) => {\n    const formData = new FormData();\n    formData.append('user[email]', email);\n    formData.append('user[password]', password);\n    axios.post(`${url}/login`,formData,\n        { withCredentials: true }\n    ).then(response => {\n        if (response.data.logged_in) {\n            handleLogin()\n            history.push(\"/home/page/1\")\n        } else if (response.data.status === 401) {\n            setErrors_m(response.data.errors)\n            console.log(\"registration errorrrrr\")\n        }\n    }).catch(error => {\n        console.log(\"registration error\", error)\n        event.preventDefault()\n    })\n  }\n\n  const handleSentEmail = () => {\n    axios.post(`${url}/password_resets`, {sent_email: sentEmail}\n    ).then(response => {\n      if (response.data.status === \"true\" ) {\n        CloseModal()\n        props.setFlashMessage(\"メールが送信されました。\")\n        setTimeout(() => {\n          props.setFlashMessage(\"\");\n        }, 5000);\n      } else {\n        setErrors_m_sent(response.data.errors)\n      }\n    }).catch(error => {\n      setErrors_m_sent(\"aaaa\")\n    })\n   }\n\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  },[])\n\n  const PasswordReset = () => {\n    setPasswordResetForm(true)\n  }\n\nif (loggedInStatus === \"未ログイン\") {\nreturn ( \n  <>{props.logModal ? (\n    <Fragment>\n        <div className=\"back_display2\">\n          \n        </div>\n        <div className=\"form_modal_login\">   \n        { passwordResetForm ?\n          <form className=\"form_sent_email\">\n             <h1>パスワード再設定</h1>\n             <ArrowBackIcon style={{float: 'right'}} onClick={ () => setPasswordResetForm(false)}/><br></br>\n             <label>送信用のメールアドレス</label><br></br>\n             <input className='input_sent_email'\n                name=\"sent_email\"\n                type=\"email\"\n                value={sentEmail}\n                onChange={event => setSentEmail(event.target.value)}\n                onKeyDown={e => e.key === 'Enter' && e.preventDefault()}\n             /><br></br>\n             <label>パスワードを再設定するためのメールを送ります。</label><br></br>\n             <button className='btn' type=\"button\" onClick={ () => handleSentEmail()}>メールを送信</button><br/>\n             <span>{errors_m_sent}</span>\n             <div className='close' onClick={() => CloseModal()}><a><CloseIcon /></a></div>\n          </form>\n           : \n          <form className=\"form_login\">\n             <h1>ログイン</h1>\n                <label>メールアドレス</label><br></br>\n                <input className='input'\n                    type=\"email\"\n                    name=\"email\"\n                   \n                    value={email}\n                    onChange={event => setEmail(event.target.value)}\n                /><br></br>\n                <label>パスワード</label><br></br>\n                <input className='input'\n                    type=\"password\"\n                    name=\"password\"\n                    \n                    value={password}\n                    onChange={event => setPassword(event.target.value)}\n                /><br></br>\n                <button className='btn' type=\"button\" onClick={ event => onSubmit(event)}>ログイン</button><br/>\n                <a className='password_reset' onClick={() => PasswordReset()}>パスワードを忘れてしまった</a><br/>\n                <span>{errors_m}</span>\n               <div className='close' onClick={() => CloseModal()}><a><CloseIcon /></a></div>\n          </form>\n        }\n        </div>  \n        \n    </Fragment>\n) : (\n    <></>\n)}\n</>\n)\n} else {\n  return (\n    <></>\n  )\n}\n}\n\n\n\nexport default Logmodal;","/front/app/src/components/PromptingAccountCreation.tsx",["258","259"],[],"import { Fragment, useEffect, useContext} from 'react'\nimport '../ScssFile/PromptingAccountCreation.scss'\nimport CloseIcon from '@mui/icons-material/Close';\nimport { MainContext } from '../App';\ntype Props = {\n  setLogModal: React.Dispatch<React.SetStateAction<boolean>>,\n  setNewModal: React.Dispatch<React.SetStateAction<boolean>>\n}\nfunction PromptingAccountCreation(props: Props) {\n  const context = useContext(MainContext)\n  const setPromptingAccountCreation = context.setPromptingAccountCreation\n  const setLogModal = props.setLogModal\n  const setNewModal = props.setNewModal\n  const openLogModal = () => {\n    setLogModal(true)\n    setPromptingAccountCreation(false)\n  }\n  const openNewModal = () => {\n    setNewModal(true)\n    setPromptingAccountCreation(false)\n  }\n  useEffect(() => {\n     document.body.style.overflow = 'hidden';\n     setPromptingAccountCreation(true)\n     return () => {\n         document.body.style.overflow = 'auto';\n         setPromptingAccountCreation(false)\n     };\n  },[])\n  return (\n    <Fragment>\n      <div className='back_display2'></div>\n      <div className='prompting_login'>\n        <div className='container'>\n            <h2>この操作を行うにはログインする必要があります。アカウントを持ってない場合は新規登録をしてください。</h2>\n            <button className='login' onClick={() => openLogModal()}>ログイン</button>\n            <button className='new' onClick={() => openNewModal()}>新規登録</button>\n            <div className='close' onClick={() => setPromptingAccountCreation(false)}><a><CloseIcon /></a></div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default PromptingAccountCreation","/front/app/src/components/FollowersIndex.tsx",["260","261","262","263","264","265"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport { MainContext } from '../App';\nimport '../ScssFile/FollowersIndex.scss'\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport { url } from \"../config\";\nimport { TypeFollowers, TypeUser } from '../TypeDefinition/Type';\ntype Props = {\n  user: TypeUser | undefined;\n  setFollowersIndexModal: React.Dispatch<React.SetStateAction<boolean>>\n}\nfunction FollowersIndex(props: Props) {\n  const context = useContext(MainContext)\n  const loggedInStatus = context.loggedInStatus\n  const user = props.user\n  const currentUser = context.user\n  const setFollowersIndexModal = props.setFollowersIndexModal\n  const setPromptingAccountCreation = context.setPromptingAccountCreation\n  const [followers, setFollowers] = useState<TypeFollowers[]>([])\n  useEffect(() => {\n    user && openFollowModal(user.id)\n  }, [])\n  const openFollowModal = (id: number) => {\n    axios.get(`${url}/followers/${id}`, { withCredentials: true })\n    .then(response => {\n      const data = response.data\n      setFollowers(data.followers)\n      console.log(data.followers)\n      console.log(data.count)\n    })\n  }\n\n  const handleRelationship = (value: TypeFollowers, key: number) => {\n    if (value.following) {\n     relationshipDestroy(value.id)\n    } else {\n     relationshipCreate(value.id)\n    }\n  }\n\n\n  const relationshipCreate = (id: number) => {\n   if (loggedInStatus === \"ログインなう\") {\n    axios.post(\"http://localhost:3001/relationships\",  { user_id: id },  { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"フォロー\")\n        user && openFollowModal(user.id)\n        setTimeout(() => {\n          console.log(followers);\n        }, 6000);\n      }\n    })\n    .catch(error => {\n      console.log(\"エラー\")\n    })\n   } else {\n      setPromptingAccountCreation(true)\n   }\n  }\n\n  const relationshipDestroy = (id: number) => {\n    axios.delete(`http://localhost:3001/relationships/${id}`, { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(response.data.post)\n        user && openFollowModal(user.id)\n        setTimeout(() => {\n          console.log(followers);\n        }, 6000);\n      }\n    })\n    .catch(error => {\n      console.log(\"エラー\")\n   })\n  }\n\n  const closeModal = () => {\n    setFollowersIndexModal(false)\n  }\n\n  return (\n   <Fragment>\n    <div className='back_display2'></div>\n    { user && user.id && (\n    <div className='followers_index_modal'>\n      <h3>フォロワー</h3>\n      <div className='followers_innner'>\n          {followers.map((value: TypeFollowers, key: number) => {\n            return (\n             <Fragment>\n               <div className='followers_content'>\n                <div className='icon'>\n                { value.avatar.url && <img src={value.avatar.url}></img> }\n                </div>\n                { value.id && <Link to={`/profile/${value.id}/page/1`} onClick={() => closeModal()} className='user_name'><a>{value.name}</a></Link> }\n                { currentUser && currentUser.id === value.id ? \n                  <></>\n                  : \n                  currentUser && value.following && currentUser.id ?\n                    <a className=\"unfollow\" onClick={() => handleRelationship(value, key)}>フォロー中</a>\n                      :\n                    <a className=\"follow\" onClick={() => handleRelationship(value, key)}>フォローする</a>\n                }\n               </div>\n             </Fragment>\n            )\n          })}\n      </div>\n      <div className='close' onClick={() => closeModal()}><a><CloseIcon /></a></div>\n    </div>\n    )}\n   </Fragment>\n  )\n}\n\nexport default FollowersIndex","/front/app/src/components/WarnModal.tsx",[],[],"/front/app/src/components/FollowingIndex.tsx",["266","267","268","269","270","271"],[],"import { Fragment, useEffect, useState, useContext } from 'react'\nimport { MainContext } from '../App';\nimport '../ScssFile/FollowingIndex.scss'\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport CloseIcon from '@mui/icons-material/Close';\nimport { url } from \"../config\";\nimport { TypeFollowing, TypeUser } from '../TypeDefinition/Type';\ntype Props = {\n  user: TypeUser | undefined;\n  setFollowingIndexModal: React.Dispatch<React.SetStateAction<boolean>>;\n}\nfunction FollowingIndex(props: Props) {\n  const context = useContext(MainContext)\n  const loggedInStatus = context.loggedInStatus\n  const user = props.user\n  const currentUser = context.user\n  const setFollowingIndexModal = props.setFollowingIndexModal\n  const setPromptingAccountCreation = context.setPromptingAccountCreation\n  const [following, setFollowing] = useState<TypeFollowing[]>([])\n  useEffect(() => {\n    user && openFollowModal(user.id)\n  }, [])\n  const openFollowModal = (id: number) => {\n    axios.get(`${url}/following/${id}`, { withCredentials: true })\n    .then(response => {\n      const data = response.data\n      setFollowing(data.following)\n      console.log(data.following)\n      console.log(data.count)\n    })\n  }\n\n  const handleRelationship = (value: TypeFollowing) => {\n    if (value.following) {\n     relationshipDestroy(value.id)\n    } else {\n     relationshipCreate(value.id)\n    }\n  }\n\n  const relationshipCreate = (id: number) => {\n   if (loggedInStatus === \"ログインなう\") {\n    axios.post(\"http://localhost:3001/relationships\",  { user_id: id },  { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"フォロー\")\n        user && openFollowModal(user.id)\n      }\n    })\n    .catch(error => {\n      console.log(error, \"エラー\")\n    })\n   } else {\n    setPromptingAccountCreation(true)\n   }\n  }\n  const relationshipDestroy = (id: number) => {\n    axios.delete(`http://localhost:3001/relationships/${id}`, { withCredentials: true })\n    .then(response => {\n      if (response.data.status) {\n        console.log(\"フォロー解除\")\n        user && openFollowModal(user.id)\n      }\n    })\n    .catch(error => {\n      console.log(error, \"エラー\")\n   })\n  }\n\n  const closeModal = () => {\n    setFollowingIndexModal(false)\n  }\n\n  return (\n   <Fragment>\n    <div className='back_display2'></div>\n    { user && user.id && (\n    <div className='following_index_modal'>\n      <h3>フォロー中</h3>\n      <div className='following_innner'>\n        {following.map((value: TypeFollowing, key:  number) => {\n           return (\n             <Fragment>\n              <div className='following_content'>\n               <div className='icon'>\n                 <img src={value.avatar.url}></img>\n                </div>\n                <Link to={`/profile/${value.id}/page/1`} onClick={() => closeModal()} className='user_name'><a>{value.name}</a></Link>      \n                { currentUser && currentUser.id === value.id ? \n                  <></>\n                  : \n                  currentUser && value.following && currentUser.id ?\n                    <a className=\"unfollow\" onClick={() => handleRelationship(value)}>フォロー中</a>\n                      :\n                    <a className=\"follow\" onClick={() => handleRelationship(value)}>フォローする</a>\n                }\n              </div>\n             </Fragment>\n           )\n        })}\n      </div>\n      <div className='close' onClick={() => closeModal()}><a><CloseIcon /></a></div>\n    </div>\n    )}\n   </Fragment>\n  )\n}\n\nexport default FollowingIndex","/front/app/src/components/ListData.tsx",[],[],{"ruleId":"272","severity":1,"message":"273","line":15,"column":8,"nodeType":"274","messageId":"275","endLine":15,"endColumn":11},{"ruleId":"272","severity":1,"message":"276","line":35,"column":19,"nodeType":"274","messageId":"275","endLine":35,"endColumn":30},{"ruleId":"277","severity":1,"message":"278","line":121,"column":43,"nodeType":"279","endLine":121,"endColumn":86},{"ruleId":"280","severity":1,"message":"281","line":127,"column":15,"nodeType":"279","endLine":127,"endColumn":18},{"ruleId":"280","severity":1,"message":"281","line":131,"column":15,"nodeType":"279","endLine":131,"endColumn":18},{"ruleId":"280","severity":1,"message":"281","line":138,"column":13,"nodeType":"279","endLine":138,"endColumn":16},{"ruleId":"280","severity":1,"message":"281","line":146,"column":18,"nodeType":"279","endLine":146,"endColumn":21},{"ruleId":"280","severity":1,"message":"281","line":147,"column":18,"nodeType":"279","endLine":147,"endColumn":47},{"ruleId":"280","severity":1,"message":"281","line":153,"column":13,"nodeType":"279","endLine":153,"endColumn":16},{"ruleId":"280","severity":1,"message":"281","line":155,"column":13,"nodeType":"279","endLine":155,"endColumn":16},{"ruleId":"280","severity":1,"message":"281","line":164,"column":63,"nodeType":"279","endLine":164,"endColumn":66},{"ruleId":"272","severity":1,"message":"282","line":21,"column":10,"nodeType":"274","messageId":"275","endLine":21,"endColumn":15},{"ruleId":"283","severity":1,"message":"284","line":43,"column":6,"nodeType":"285","endLine":43,"endColumn":10,"suggestions":"286"},{"ruleId":"283","severity":1,"message":"287","line":53,"column":6,"nodeType":"285","endLine":53,"endColumn":13,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":184,"column":16,"nodeType":"279","endLine":184,"endColumn":49},{"ruleId":"289","severity":1,"message":"290","line":201,"column":47,"nodeType":"279","endLine":201,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":204,"column":21,"nodeType":"279","endLine":204,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":212,"column":14,"nodeType":"279","endLine":212,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":216,"column":14,"nodeType":"279","endLine":216,"endColumn":41},{"ruleId":"272","severity":1,"message":"291","line":14,"column":9,"nodeType":"274","messageId":"275","endLine":14,"endColumn":19},{"ruleId":"272","severity":1,"message":"292","line":19,"column":19,"nodeType":"274","messageId":"275","endLine":19,"endColumn":30},{"ruleId":"272","severity":1,"message":"293","line":20,"column":31,"nodeType":"274","messageId":"275","endLine":20,"endColumn":54},{"ruleId":"283","severity":1,"message":"294","line":78,"column":5,"nodeType":"285","endLine":78,"endColumn":16,"suggestions":"295"},{"ruleId":"289","severity":1,"message":"290","line":89,"column":11,"nodeType":"279","endLine":90,"endColumn":33},{"ruleId":"280","severity":1,"message":"281","line":61,"column":17,"nodeType":"279","endLine":61,"endColumn":46},{"ruleId":"283","severity":1,"message":"284","line":38,"column":6,"nodeType":"285","endLine":38,"endColumn":10,"suggestions":"296"},{"ruleId":"289","severity":1,"message":"290","line":132,"column":14,"nodeType":"279","endLine":132,"endColumn":127},{"ruleId":"289","severity":1,"message":"290","line":143,"column":14,"nodeType":"279","endLine":143,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":154,"column":47,"nodeType":"279","endLine":154,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":157,"column":21,"nodeType":"279","endLine":157,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":165,"column":14,"nodeType":"279","endLine":165,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":169,"column":14,"nodeType":"279","endLine":169,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":58,"column":6,"nodeType":"285","endLine":58,"endColumn":18,"suggestions":"297"},{"ruleId":"280","severity":1,"message":"281","line":187,"column":9,"nodeType":"279","endLine":187,"endColumn":34},{"ruleId":"280","severity":1,"message":"281","line":190,"column":13,"nodeType":"279","endLine":190,"endColumn":41},{"ruleId":"280","severity":1,"message":"281","line":194,"column":15,"nodeType":"279","endLine":194,"endColumn":83},{"ruleId":"280","severity":1,"message":"281","line":196,"column":15,"nodeType":"279","endLine":196,"endColumn":81},{"ruleId":"280","severity":1,"message":"281","line":199,"column":10,"nodeType":"279","endLine":199,"endColumn":13},{"ruleId":"280","severity":1,"message":"281","line":200,"column":10,"nodeType":"279","endLine":200,"endColumn":83},{"ruleId":"280","severity":1,"message":"281","line":201,"column":10,"nodeType":"279","endLine":201,"endColumn":83},{"ruleId":"289","severity":1,"message":"290","line":225,"column":14,"nodeType":"279","endLine":225,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":236,"column":47,"nodeType":"279","endLine":236,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":239,"column":21,"nodeType":"279","endLine":239,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":247,"column":14,"nodeType":"279","endLine":247,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":251,"column":14,"nodeType":"279","endLine":251,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":40,"column":6,"nodeType":"285","endLine":40,"endColumn":10,"suggestions":"298"},{"ruleId":"289","severity":1,"message":"290","line":168,"column":16,"nodeType":"279","endLine":168,"endColumn":49},{"ruleId":"289","severity":1,"message":"290","line":186,"column":47,"nodeType":"279","endLine":186,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":189,"column":21,"nodeType":"279","endLine":189,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":197,"column":14,"nodeType":"279","endLine":197,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":201,"column":14,"nodeType":"279","endLine":201,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":40,"column":6,"nodeType":"285","endLine":40,"endColumn":10,"suggestions":"299"},{"ruleId":"289","severity":1,"message":"290","line":137,"column":14,"nodeType":"279","endLine":137,"endColumn":127},{"ruleId":"289","severity":1,"message":"290","line":157,"column":16,"nodeType":"279","endLine":157,"endColumn":49},{"ruleId":"289","severity":1,"message":"290","line":174,"column":47,"nodeType":"279","endLine":174,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":177,"column":21,"nodeType":"279","endLine":177,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":185,"column":14,"nodeType":"279","endLine":185,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":189,"column":14,"nodeType":"279","endLine":189,"endColumn":41},{"ruleId":"280","severity":1,"message":"281","line":62,"column":17,"nodeType":"279","endLine":62,"endColumn":46},{"ruleId":"283","severity":1,"message":"284","line":43,"column":6,"nodeType":"285","endLine":43,"endColumn":10,"suggestions":"300"},{"ruleId":"283","severity":1,"message":"287","line":53,"column":6,"nodeType":"285","endLine":53,"endColumn":13,"suggestions":"301"},{"ruleId":"289","severity":1,"message":"290","line":182,"column":16,"nodeType":"279","endLine":182,"endColumn":49},{"ruleId":"289","severity":1,"message":"290","line":199,"column":47,"nodeType":"279","endLine":199,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":202,"column":21,"nodeType":"279","endLine":202,"endColumn":52},{"ruleId":"280","severity":1,"message":"281","line":210,"column":14,"nodeType":"279","endLine":210,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":214,"column":14,"nodeType":"279","endLine":214,"endColumn":41},{"ruleId":"289","severity":1,"message":"290","line":188,"column":85,"nodeType":"279","endLine":188,"endColumn":143},{"ruleId":"289","severity":1,"message":"290","line":210,"column":90,"nodeType":"279","endLine":210,"endColumn":147},{"ruleId":"280","severity":1,"message":"281","line":221,"column":94,"nodeType":"279","endLine":221,"endColumn":97},{"ruleId":"289","severity":1,"message":"290","line":225,"column":28,"nodeType":"279","endLine":225,"endColumn":50},{"ruleId":"280","severity":1,"message":"281","line":226,"column":28,"nodeType":"279","endLine":226,"endColumn":72},{"ruleId":"280","severity":1,"message":"281","line":253,"column":28,"nodeType":"279","endLine":257,"endColumn":30},{"ruleId":"280","severity":1,"message":"281","line":296,"column":35,"nodeType":"279","endLine":296,"endColumn":66},{"ruleId":"280","severity":1,"message":"281","line":301,"column":17,"nodeType":"279","endLine":301,"endColumn":65},{"ruleId":"280","severity":1,"message":"281","line":348,"column":85,"nodeType":"279","endLine":348,"endColumn":88},{"ruleId":"280","severity":1,"message":"281","line":127,"column":17,"nodeType":"279","endLine":127,"endColumn":46},{"ruleId":"280","severity":1,"message":"281","line":128,"column":68,"nodeType":"279","endLine":128,"endColumn":71},{"ruleId":"302","severity":1,"message":"303","line":34,"column":38,"nodeType":"304","messageId":"305","endLine":34,"endColumn":40},{"ruleId":"302","severity":1,"message":"303","line":35,"column":87,"nodeType":"304","messageId":"305","endLine":35,"endColumn":89},{"ruleId":"280","severity":1,"message":"281","line":41,"column":13,"nodeType":"279","endLine":41,"endColumn":33},{"ruleId":"280","severity":1,"message":"281","line":44,"column":13,"nodeType":"279","endLine":44,"endColumn":39},{"ruleId":"302","severity":1,"message":"303","line":54,"column":38,"nodeType":"304","messageId":"305","endLine":54,"endColumn":40},{"ruleId":"302","severity":1,"message":"303","line":55,"column":87,"nodeType":"304","messageId":"305","endLine":55,"endColumn":89},{"ruleId":"280","severity":1,"message":"281","line":61,"column":13,"nodeType":"279","endLine":61,"endColumn":33},{"ruleId":"280","severity":1,"message":"281","line":64,"column":13,"nodeType":"279","endLine":64,"endColumn":39},{"ruleId":"280","severity":1,"message":"281","line":73,"column":13,"nodeType":"279","endLine":73,"endColumn":33},{"ruleId":"280","severity":1,"message":"281","line":76,"column":13,"nodeType":"279","endLine":76,"endColumn":39},{"ruleId":"280","severity":1,"message":"281","line":79,"column":13,"nodeType":"279","endLine":81,"endColumn":15},{"ruleId":"289","severity":1,"message":"290","line":88,"column":13,"nodeType":"279","endLine":88,"endColumn":35},{"ruleId":"280","severity":1,"message":"281","line":89,"column":13,"nodeType":"279","endLine":89,"endColumn":80},{"ruleId":"289","severity":1,"message":"290","line":19,"column":10,"nodeType":"279","endLine":19,"endColumn":112},{"ruleId":"280","severity":1,"message":"281","line":22,"column":9,"nodeType":"279","endLine":22,"endColumn":59},{"ruleId":"280","severity":1,"message":"281","line":23,"column":9,"nodeType":"279","endLine":23,"endColumn":61},{"ruleId":"280","severity":1,"message":"281","line":44,"column":10,"nodeType":"279","endLine":44,"endColumn":48},{"ruleId":"280","severity":1,"message":"281","line":47,"column":9,"nodeType":"279","endLine":47,"endColumn":59},{"ruleId":"280","severity":1,"message":"281","line":48,"column":9,"nodeType":"279","endLine":48,"endColumn":59},{"ruleId":"306","severity":1,"message":"307","line":55,"column":91,"nodeType":"308","messageId":"309","endLine":55,"endColumn":93},{"ruleId":"289","severity":1,"message":"290","line":56,"column":7,"nodeType":"279","endLine":57,"endColumn":39},{"ruleId":"280","severity":1,"message":"281","line":67,"column":9,"nodeType":"279","endLine":67,"endColumn":47},{"ruleId":"280","severity":1,"message":"281","line":70,"column":7,"nodeType":"279","endLine":70,"endColumn":58},{"ruleId":"280","severity":1,"message":"281","line":71,"column":7,"nodeType":"279","endLine":71,"endColumn":66},{"ruleId":"280","severity":1,"message":"281","line":71,"column":66,"nodeType":"279","endLine":71,"endColumn":69},{"ruleId":"280","severity":1,"message":"281","line":104,"column":66,"nodeType":"279","endLine":104,"endColumn":69},{"ruleId":"280","severity":1,"message":"281","line":126,"column":17,"nodeType":"279","endLine":126,"endColumn":79},{"ruleId":"280","severity":1,"message":"281","line":128,"column":68,"nodeType":"279","endLine":128,"endColumn":71},{"ruleId":"283","severity":1,"message":"310","line":29,"column":5,"nodeType":"285","endLine":29,"endColumn":7,"suggestions":"311"},{"ruleId":"280","severity":1,"message":"281","line":38,"column":87,"nodeType":"279","endLine":38,"endColumn":90},{"ruleId":"283","severity":1,"message":"294","line":23,"column":6,"nodeType":"285","endLine":23,"endColumn":8,"suggestions":"312"},{"ruleId":"289","severity":1,"message":"290","line":95,"column":39,"nodeType":"279","endLine":95,"endColumn":67},{"ruleId":"280","severity":1,"message":"281","line":97,"column":123,"nodeType":"279","endLine":97,"endColumn":126},{"ruleId":"280","severity":1,"message":"281","line":102,"column":21,"nodeType":"279","endLine":102,"endColumn":92},{"ruleId":"280","severity":1,"message":"281","line":104,"column":21,"nodeType":"279","endLine":104,"endColumn":90},{"ruleId":"280","severity":1,"message":"281","line":111,"column":59,"nodeType":"279","endLine":111,"endColumn":62},{"ruleId":"283","severity":1,"message":"294","line":23,"column":6,"nodeType":"285","endLine":23,"endColumn":8,"suggestions":"313"},{"ruleId":"289","severity":1,"message":"290","line":87,"column":18,"nodeType":"279","endLine":87,"endColumn":46},{"ruleId":"280","severity":1,"message":"281","line":89,"column":109,"nodeType":"279","endLine":89,"endColumn":112},{"ruleId":"280","severity":1,"message":"281","line":94,"column":21,"nodeType":"279","endLine":94,"endColumn":87},{"ruleId":"280","severity":1,"message":"281","line":96,"column":21,"nodeType":"279","endLine":96,"endColumn":85},{"ruleId":"280","severity":1,"message":"281","line":103,"column":59,"nodeType":"279","endLine":103,"endColumn":62},"@typescript-eslint/no-unused-vars","'Top' is defined but never used.","Identifier","unusedVar","'setWarnType' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'modal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postAllGet'. Either include it or remove the dependency array.","ArrayExpression",["314"],"React Hook useEffect has missing dependencies: 'numericId' and 'postAllGet'. Either include them or remove the dependency array.",["315"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'nameChange' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'setPasswordConfirmation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["316"],["317"],["318"],["319"],["320"],["321"],["322"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'setPromptingAccountCreation'. Either include it or remove the dependency array.",["323"],["324"],["325"],{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"326","fix":"332"},{"desc":"333","fix":"334"},{"desc":"326","fix":"335"},{"desc":"326","fix":"336"},{"desc":"326","fix":"337"},{"desc":"328","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"341","fix":"343"},"Update the dependencies array to be: [id, postAllGet]",{"range":"344","text":"345"},"Update the dependencies array to be: [numericId, postAllGet, query]",{"range":"346","text":"347"},"Update the dependencies array to be: [user, warnModal]",{"range":"348","text":"349"},{"range":"350","text":"345"},"Update the dependencies array to be: [number, id, postAllGet]",{"range":"351","text":"352"},{"range":"353","text":"345"},{"range":"354","text":"345"},{"range":"355","text":"345"},{"range":"356","text":"347"},"Update the dependencies array to be: [setPromptingAccountCreation]",{"range":"357","text":"358"},"Update the dependencies array to be: [user]",{"range":"359","text":"360"},{"range":"361","text":"360"},[1979,1983],"[id, postAllGet]",[2171,2178],"[numericId, postAllGet, query]",[3184,3195],"[user, warnModal]",[1706,1710],[2588,2600],"[number, id, postAllGet]",[1853,1857],[1815,1819],[1977,1981],[2169,2176],[1002,1004],"[setPromptingAccountCreation]",[937,939],"[user]",[938,940]]